"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceParser = void 0;
var Models_1 = require("./Models");
var ScopeHelper_1 = require("./ScopeHelper");
var RegExHelper_1 = require("./RegExHelper");
var MethodParser_1 = require("./MethodParser");
var PropertyParser_1 = require("./PropertyParser");
var AttributeParser_1 = require("./AttributeParser");
var InterfaceParser = /** @class */ (function () {
    function InterfaceParser(typeParser) {
        this.typeParser = typeParser;
        this.scopeHelper = new ScopeHelper_1.ScopeHelper();
        this.regexHelper = new RegExHelper_1.RegExHelper();
        this.propertyParser = new PropertyParser_1.PropertyParser();
        this.attributeParser = new AttributeParser_1.AttributeParser();
        this.methodParser = new MethodParser_1.MethodParser(typeParser);
    }
    InterfaceParser.prototype.parseInterfaces = function (content) {
        var interfaces = new Array();
        var scopes = this.scopeHelper.getCurlyScopes(content);
        for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
            var scope = scopes_1[_i];
            var statements = this.scopeHelper.getStatements(scope.prefix);
            for (var _a = 0, statements_1 = statements; _a < statements_1.length; _a++) {
                var statement = statements_1[_a];
                var matches = this.regexHelper.getMatches(statement, new RegExp("^" + this.regexHelper.getInterfaceRegex() + "$", "g"));
                for (var _b = 0, matches_1 = matches; _b < matches_1.length; _b++) {
                    var match = matches_1[_b];
                    try {
                        var interfaceObject = new Models_1.CSharpInterface(match[2]);
                        interfaceObject.innerScopeText = scope.content;
                        interfaceObject.genericParameters = this.typeParser.parseTypesFromGenericParameters(match[3]);
                        interfaceObject.isPublic = (match[1] || "").indexOf("public") > -1;
                        interfaceObject.attributes = this.attributeParser.parseAttributes(match[0]);
                        interfaceObject.implements = this.typeParser.parseTypesFromGenericParameters(match[4]);
                        var properties = this.propertyParser.parseProperties(scope.content);
                        for (var _c = 0, properties_1 = properties; _c < properties_1.length; _c++) {
                            var property = properties_1[_c];
                            property.parent = interfaceObject;
                            interfaceObject.properties.push(property);
                        }
                        var methods = this.methodParser.parseMethods(scope.content, interfaceObject);
                        for (var _d = 0, methods_1 = methods; _d < methods_1.length; _d++) {
                            var method = methods_1[_d];
                            method.parent = interfaceObject;
                            interfaceObject.methods.push(method);
                        }
                        interfaces.push(interfaceObject);
                    }
                    catch (ex) {
                        console.error("Skipping interface due to parsing error.", statement, ex);
                        debugger;
                    }
                }
            }
        }
        return interfaces;
    };
    return InterfaceParser;
}());
exports.InterfaceParser = InterfaceParser;
//# sourceMappingURL=InterfaceParser.js.map