"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegExHelper = void 0;
var RegExHelper = /** @class */ (function () {
    function RegExHelper() {
    }
    //many of the rules here come from the C# standard: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf
    RegExHelper.prototype.getLiteralNumberHexadecimalRegex = function (capture) {
        return this.wrapInGroup(false, true, "0x" + this.wrapInGroup(capture, false, "[\\dA-F]+"));
    };
    RegExHelper.prototype.getSignRegex = function (capture) {
        return this.wrapInGroup(capture, true, "[\\+\\-]");
    };
    RegExHelper.prototype.getLiteralNumberIntegerRegex = function (capture) {
        var integerRegex = this.wrapInGroup(capture, false, this.getSignRegex(false) + "??" +
            this.wrapInGroup(false, true, "\\d+?")) +
            "[uUlL]*?";
        return this.wrapInGroup(false, true, integerRegex + "|" + this.getLiteralNumberHexadecimalRegex(false));
    };
    RegExHelper.prototype.getLiteralNumberDecimalRegex = function (capture) {
        var decimalDigits = "\\d+?";
        var exponentPart = this.wrapInGroup(false, false, "[eE]" + (this.getSignRegex(false) + "??") + decimalDigits);
        var realTypeSuffix = this.wrapInGroup(false, false, "[fFdDmM]");
        var realLiteral = this.wrapInGroup(false, false, decimalDigits + "\\." + decimalDigits + (exponentPart + "??") + (realTypeSuffix + "??")) + "|" +
            this.wrapInGroup(false, false, "\\." + decimalDigits + (exponentPart + "??") + (realTypeSuffix + "??")) + "|" +
            this.wrapInGroup(false, false, decimalDigits + exponentPart + (realTypeSuffix + "??")) + "|" +
            this.wrapInGroup(false, false, decimalDigits + realTypeSuffix);
        return this.wrapInGroup(false, true, this.getSignRegex(false) + "??" +
            this.wrapInGroup(false, true, realLiteral));
    };
    RegExHelper.prototype.getLiteralNumberRegex = function (capture) {
        return this.wrapInGroup(capture, true, this.getLiteralNumberDecimalRegex(false) + "|" +
            this.getLiteralNumberIntegerRegex(false) + "{1}?");
    };
    RegExHelper.prototype.getLiteralStringRegex = function (capture) {
        return this.wrapInGroup(capture, false, "\".+\"");
    };
    RegExHelper.prototype.getLiteralCharacterRegex = function (capture) {
        return this.wrapInGroup(capture, false, "'" + this.wrapInGroup(false, false, "\\\\?.") + "'");
    };
    RegExHelper.prototype.getTypeOfRegex = function (capture) {
        return this.wrapInGroup(capture, false, "typeof" + this.wrapInGroup(false, true, this.getMethodParametersWrapperRegex(false, false)));
    };
    RegExHelper.prototype.getLiteralRegex = function (capture) {
        return this.wrapInGroup(capture, true, this.getLiteralNumberRegex(false) + "{1}?|" +
            this.getLiteralStringRegex(false) + "|" +
            this.getLiteralCharacterRegex(false) + "|" +
            this.getNameRegex(false));
    };
    RegExHelper.prototype.getMethodParameterRegex = function (capture, captureAttributes, captureModifiers, captureType, captureName, captureDefaultValue) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getModifierRegex(captureModifiers) + "??";
        result += this.getGenericTypeNameRegex(captureType, false, false, false, false);
        result += this.getNameRegex(captureName);
        result += this.wrapInGroup(false, true, this.wrapInGroup(false, true, "=") +
            this.getLiteralRegex(captureDefaultValue)) +
            "??";
        return this.wrapInGroup(capture, true, result);
    };
    RegExHelper.prototype.getMethodParametersWrapperRegex = function (capture, captureContents) {
        return this.wrapInGroup(capture, true, "\\(" + this.getWildcardGroup(captureContents) + "\\)");
    };
    RegExHelper.prototype.getEnumOptionRegex = function (capture, captureAttributes, captureName, captureValue) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getNameRegex(captureName);
        result += this.wrapInGroup(false, true, this.wrapInGroup(false, true, "=") +
            this.getLiteralNumberIntegerRegex(captureValue)) +
            "??";
        return this.wrapInGroup(capture, true, result);
    };
    RegExHelper.prototype.getEnumRegex = function (capture, captureAttributes, captureModifiers, captureName, captureInheritance) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getModifiersRegex(captureModifiers);
        result += this.wrapInGroup(false, true, "enum");
        result += this.getNameRegex(captureName);
        result += this.wrapInGroup(false, true, this.wrapInGroup(false, true, ":") +
            this.getNameRegex(captureInheritance)) +
            "??";
        result += this.wrapInGroup(false, true, "{");
        return result;
    };
    RegExHelper.prototype.getMethodRegex = function (capture, captureAttributes, captureModifiers, captureReturnType, captureName, captureGenericParameters, captureParameters, captureOpeningMethod) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getModifiersRegex(captureModifiers);
        result += this.getGenericTypeNameRegex(captureReturnType, false, false, false, false) + "??";
        result += this.getGenericNameRegex(false, captureName, captureGenericParameters);
        result += this.getMethodParametersWrapperRegex(false, captureParameters);
        result += this.wrapInGroup(false, false, this.wrapInGroup(false, true, "where") +
            this.getGenericNameRegex(false, false, false) +
            this.wrapInGroup(false, true, ":")) +
            "*?";
        result += this.wrapInGroup(captureOpeningMethod, true, this.wrapInGroup(false, false, "{") + "|" +
            this.wrapInGroup(false, false, ";") + "|" +
            this.wrapInGroup(false, false, this.wrapInGroup(false, false, "=>")));
        return this.wrapInGroup(capture, false, result);
    };
    RegExHelper.prototype.getWildcardGroup = function (capture) {
        return this.wrapInGroup(capture, false, "(?:\\s|.)*");
    };
    RegExHelper.prototype.getNamespaceRegex = function (capture, captureFullName) {
        return this.wrapInGroup(capture, true, this.wrapInGroup(false, true, "namespace") +
            this.getNameRegex(captureFullName));
    };
    RegExHelper.prototype.getFieldRegex = function (capture, captureAttributes, captureModifiers, captureReturnType, captureName, captureInitialValue) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getModifiersRegex(captureModifiers);
        result += this.getGenericTypeNameRegex(captureReturnType, false, false, false, false);
        result += this.getNameRegex(captureName);
        result += this.getInitialValueRegex(captureInitialValue);
        result += this.wrapInGroup(false, true, ";");
        return this.wrapInGroup(capture, false, result);
    };
    RegExHelper.prototype.getPropertyRegex = function (capture, captureAttributes, captureModifiers, captureReturnType, captureName, captureOpeningMethod) {
        var result = "";
        result += this.getAttributesRegex(captureAttributes);
        result += this.getModifiersRegex(captureModifiers);
        result += this.getGenericTypeNameRegex(captureReturnType, false, false, false, false);
        result += this.getNameRegex(captureName);
        result += this.wrapInGroup(captureOpeningMethod, true, this.wrapInGroup(false, false, "{") + "|" +
            this.wrapInGroup(false, false, this.wrapInGroup(false, false, "=>")));
        return this.wrapInGroup(capture, false, result);
    };
    RegExHelper.prototype.getPropertyInitialValueRegex = function (capture) {
        var result = "";
        result += this.wrapInGroup(false, true, "}");
        result += this.wrapInGroup(false, false, "=");
        result += this.wrapInGroup(capture, true, "[^;]+?");
        result += this.wrapInGroup(false, false, ";");
        return this.wrapInGroup(false, false, result);
    };
    RegExHelper.prototype.getKeywordRegex = function (capture) {
        var validKeywords = [
            this.getModifierRegex(false),
            "as",
            "base",
            "break",
            "case",
            "catch",
            "checked",
            "class",
            "const",
            "continue",
            "default",
            "delegate",
            "do",
            "else",
            "enum",
            "explicit",
            "finally",
            "fixed",
            "for",
            "foreach",
            "goto",
            "if",
            "implicit",
            "in",
            "interface",
            "is",
            "lock",
            "namespace",
            "new",
            "operator",
            "out",
            "override",
            "return",
            "sealed",
            "sizeof",
            "stackalloc",
            "switch",
            "this",
            "throw",
            "try",
            "typeof",
            "unchecked",
            "unsafe",
            "using",
            "while"
        ];
        return this.wrapInGroup(capture, false, validKeywords.join('|'));
    };
    RegExHelper.prototype.getModifierRegex = function (capture) {
        var validModifiers = [
            "public",
            "private",
            "internal",
            "protected",
            "abstract",
            "async",
            "const",
            "event",
            "extern",
            "new",
            "override",
            "partial",
            "readonly",
            "sealed",
            "static",
            "unsafe",
            "virtual",
            "volatile",
            "ref",
            "params"
        ];
        return this.wrapInGroup(capture, false, validModifiers.join('|'));
    };
    RegExHelper.prototype.getModifiersRegex = function (capture) {
        var _this = this;
        return this.wrapInGroup(capture, false, this.repeatGroups("\\s*", function () { return _this.getModifierRegex(false); }) + "*?");
    };
    RegExHelper.prototype.getAttributeParameterRegex = function (capture, captureName, captureValue) {
        var result = "";
        result += this.wrapInGroup(false, true, this.getNameRegex(captureName) + "=") + "??";
        result += this.getLiteralRegex(captureValue) + "|";
        result += this.getTypeOfRegex(captureValue);
        return this.wrapInGroup(capture, true, result);
    };
    RegExHelper.prototype.getAttributeParametersRegex = function (capture, captureContents) {
        var _this = this;
        return this.wrapInGroup(capture, true, "\\(" + this.wrapInGroup(captureContents, true, this.repeatGroups(",", function () { return _this.getAttributeParameterRegex(false, false, false); })) + "\\)");
    };
    RegExHelper.prototype.getAttributeRegex = function (capture, captureAttributeName, captureParameters) {
        return this.wrapInGroup(capture, true, this.getNameRegex(captureAttributeName) + this.getAttributeParametersRegex(false, captureParameters) + "??");
    };
    RegExHelper.prototype.getAttributesRegex = function (capture) {
        var _this = this;
        return this.wrapInGroup(capture, false, this.wrapInGroup(false, true, "\\[" + this.repeatGroups(",", function () { return _this.getAttributeRegex(false, false, false); }) + "\\]") + "*?");
    };
    RegExHelper.prototype.getNameRegex = function (capture) {
        return this.wrapInGroup(capture, true, "[\\w.]+");
    };
    RegExHelper.prototype.getGenericTypeWrapperRegex = function (capture, captureContents) {
        return this.wrapInGroup(capture, true, "<" + this.wrapInGroup(captureContents, true, "[^=]+") + ">") + "??";
    };
    RegExHelper.prototype.getTypeConstraintRegex = function (capture) {
        return this.wrapInGroup(capture, true, this.getGenericNameRegex(false, false, false) + "|new\\s*\\(\\s*\\)|class|struct");
    };
    RegExHelper.prototype.getGenericNameRegex = function (capture, captureTypeName, captureGenericsContent) {
        return this.wrapInGroup(capture, true, this.getNameRegex(captureTypeName) +
            this.getGenericTypeWrapperRegex(false, captureGenericsContent));
    };
    RegExHelper.prototype.getUsingRegex = function (capture, captureAlias, captureNamespace) {
        var result = "";
        result += this.wrapInGroup(false, true, "using");
        result += this.wrapInGroup(false, true, this.getNameRegex(captureAlias) +
            this.wrapInGroup(false, true, "=")) +
            "??";
        result += this.getNameRegex(captureNamespace);
        result += this.wrapInGroup(false, true, ";");
        return result;
    };
    RegExHelper.prototype.getGenericTypeNameRegex = function (capture, captureTypeName, captureGenericsContent, captureTupleContent, captureSuffix) {
        return this.wrapInGroup(capture, true, this.wrapInGroup(false, false, this.getGenericNameRegex(false, captureTypeName, captureGenericsContent) + "|" +
            this.wrapInGroup(false, false, "\\(" + this.wrapInGroup(captureTupleContent, true, ".+?") + "\\)")) +
            this.wrapInGroup(captureSuffix, true, "\\?|" + this.wrapInGroup(false, true, "\\[\\s*\\]") + "+") + "??");
    };
    RegExHelper.prototype.wrapInGroup = function (capture, wrapInSpaces, input) {
        input = (capture ? "(" : "(?:") + input + ")";
        if (wrapInSpaces)
            input = "(?:\\s*?" + input + "\\s*?)";
        return input;
    };
    RegExHelper.prototype.wrapInNegatedGroup = function (capture, wrapInSpaces, input) {
        return this.wrapInGroup(capture, wrapInSpaces, "(?!" + input + ")");
    };
    RegExHelper.prototype.repeatGroups = function (separator, groupRegexFunction) {
        return this.wrapInGroup(false, false, groupRegexFunction() + separator) + "*?" + groupRegexFunction();
    };
    RegExHelper.prototype.getStructRegex = function () {
        var result = "";
        result += this.getAttributesRegex(true);
        result += this.getModifiersRegex(true);
        result += this.wrapInGroup(false, true, "struct");
        //struct name
        result += this.getGenericNameRegex(false, true, true);
        //inheritance.
        var whereSection = "";
        whereSection += this.wrapInGroup(false, true, "where");
        whereSection += this.getNameRegex(false);
        whereSection += this.wrapInGroup(false, true, ":");
        whereSection += this.getTypeConstraintRegex(false);
        result += this.wrapInGroup(false, true, whereSection) + "*?";
        result += "{";
        return this.wrapInGroup(false, false, result);
    };
    RegExHelper.prototype.getClassOrInterfaceRegex = function (keyword) {
        var _this = this;
        var result = "";
        result += this.getAttributesRegex(true);
        result += this.getModifiersRegex(true);
        result += this.wrapInGroup(false, true, keyword);
        //class name.
        result += this.getGenericNameRegex(false, true, true);
        //inheritance.
        var whereSection = "";
        whereSection += this.wrapInGroup(false, true, "where");
        whereSection += this.getNameRegex(false);
        whereSection += this.wrapInGroup(false, true, ":");
        whereSection += this.getTypeConstraintRegex(false);
        var inheritanceSection = "";
        inheritanceSection += this.wrapInGroup(false, true, ":");
        inheritanceSection += this.wrapInGroup(true, true, this.repeatGroups(",", function () { return _this.getGenericNameRegex(false, false, false); }));
        result += this.wrapInGroup(false, true, inheritanceSection) + "??";
        result += this.wrapInGroup(false, true, whereSection) + "*?";
        result += "{";
        return this.wrapInGroup(false, false, result);
    };
    RegExHelper.prototype.getClassRegex = function () {
        return this.getClassOrInterfaceRegex("class");
    };
    RegExHelper.prototype.getInterfaceRegex = function () {
        return this.getClassOrInterfaceRegex("interface");
    };
    RegExHelper.prototype.getInitialValueRegex = function (capture) {
        var result = this.wrapInGroup(false, true, "=");
        result += this.wrapInGroup(capture, true, "[^;]+?");
        return this.wrapInGroup(false, false, result) + "??";
    };
    RegExHelper.prototype.getMatches = function (input, regex) {
        if (!input)
            return [];
        var final = [];
        var groups;
        while (groups = regex.exec(input)) {
            if (!groups[0])
                continue;
            final.push(groups
                .slice(1)
                .map(function (x) { return x || ""; })
                .map(function (x) { return x.trim(); }));
        }
        return final;
    };
    return RegExHelper;
}());
exports.RegExHelper = RegExHelper;
//# sourceMappingURL=RegExHelper.js.map