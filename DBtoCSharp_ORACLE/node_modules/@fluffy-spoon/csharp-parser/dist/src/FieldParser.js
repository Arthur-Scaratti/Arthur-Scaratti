"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldParser = void 0;
var Models_1 = require("./Models");
var ScopeHelper_1 = require("./ScopeHelper");
var RegExHelper_1 = require("./RegExHelper");
var AttributeParser_1 = require("./AttributeParser");
var FieldParser = /** @class */ (function () {
    function FieldParser(typeParser) {
        this.typeParser = typeParser;
        this.scopeHelper = new ScopeHelper_1.ScopeHelper();
        this.regexHelper = new RegExHelper_1.RegExHelper();
        this.attributeParser = new AttributeParser_1.AttributeParser();
    }
    FieldParser.prototype.parseFields = function (content) {
        var fields = new Array();
        var scopes = this.scopeHelper.getCurlyScopes(content);
        for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
            var scope = scopes_1[_i];
            var statements = this.scopeHelper.getStatements(scope.prefix);
            for (var _a = 0, statements_1 = statements; _a < statements_1.length; _a++) {
                var statement = statements_1[_a];
                var matches = this.regexHelper.getMatches(statement, new RegExp("^" + this.regexHelper.getFieldRegex(false, true, true, true, true, true) + "$", "g"));
                for (var _b = 0, matches_1 = matches; _b < matches_1.length; _b++) {
                    var match = matches_1[_b];
                    try {
                        var attributes = match[0];
                        var modifiers = match[1] || "";
                        var returnType = match[2];
                        var name = match[3];
                        var initialValue = match[4];
                        var field = new Models_1.CSharpField(name);
                        field.attributes = this.attributeParser.parseAttributes(attributes);
                        field.type = this.typeParser.parseType(returnType);
                        field.initialValue = initialValue;
                        field.isPublic = modifiers.indexOf("public") > -1;
                        field.isStatic = modifiers.indexOf("static") > -1;
                        field.isReadOnly = modifiers.indexOf("readonly") > -1;
                        fields.push(field);
                    }
                    catch (ex) {
                        console.error("Skipping field due to parsing error.", statement, ex);
                        debugger;
                    }
                }
            }
        }
        return fields;
    };
    return FieldParser;
}());
exports.FieldParser = FieldParser;
//# sourceMappingURL=FieldParser.js.map