"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyParser = void 0;
var Models_1 = require("./Models");
var ScopeHelper_1 = require("./ScopeHelper");
var RegExHelper_1 = require("./RegExHelper");
var TypeParser_1 = require("./TypeParser");
var AttributeParser_1 = require("./AttributeParser");
var PropertyParser = /** @class */ (function () {
    function PropertyParser() {
        this.scopeHelper = new ScopeHelper_1.ScopeHelper();
        this.regexHelper = new RegExHelper_1.RegExHelper();
        this.typeParser = new TypeParser_1.TypeParser();
        this.attributeParser = new AttributeParser_1.AttributeParser();
    }
    PropertyParser.prototype.parseProperties = function (content) {
        var properties = new Array();
        var scopes = this.scopeHelper.getCurlyScopes(content);
        for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
            var scope = scopes_1[_i];
            var statements = this.scopeHelper.getStatements(scope.prefix);
            for (var _a = 0, statements_1 = statements; _a < statements_1.length; _a++) {
                var statement = statements_1[_a];
                if (statement.indexOf('=>') > -1)
                    statement = statement.substr(0, statement.indexOf('=>') + 2);
                var matches = this.regexHelper.getMatches(statement, new RegExp("^" + this.regexHelper.getPropertyRegex(false, true, true, true, true, true) + "$", "g"));
                for (var _b = 0, matches_1 = matches; _b < matches_1.length; _b++) {
                    var match = matches_1[_b];
                    try {
                        var attributes = match[0];
                        var modifiers = match[1] || "";
                        var type = match[2];
                        var name = match[3];
                        var openingType = match[4];
                        var property = new Models_1.CSharpProperty(name);
                        property.attributes = this.attributeParser.parseAttributes(attributes);
                        property.type = this.typeParser.parseType(type);
                        property.isVirtual = modifiers.indexOf("virtual") > -1;
                        property.isPublic = modifiers.indexOf("public") > -1;
                        property.isStatic = modifiers.indexOf("static") > -1;
                        if (openingType === "{") {
                            var initialValueMatches = this.regexHelper.getMatches(scope.suffix, new RegExp("^" + this.regexHelper.getPropertyInitialValueRegex(true), "g"));
                            if (initialValueMatches.length > 0) {
                                property.initialValue = initialValueMatches[0][0];
                            }
                            var subScopes = this.scopeHelper.getCurlyScopes(scope.content);
                            for (var _c = 0, subScopes_1 = subScopes; _c < subScopes_1.length; _c++) {
                                var subScope = subScopes_1[_c];
                                var subStatements = this.scopeHelper.getStatements(subScope.prefix);
                                for (var _d = 0, subStatements_1 = subStatements; _d < subStatements_1.length; _d++) {
                                    var subStatement = subStatements_1[_d];
                                    var componentTypeMatches = this.regexHelper.getMatches(subStatement, /^(get|set)\s*[{;]$/g);
                                    //Added case for properties with lambda like get => some methods..
                                    if (componentTypeMatches.length === 0) {
                                        componentTypeMatches = this.regexHelper.getMatches(subStatement, /^(get|set)\s*[=>]+/g);
                                    }
                                    for (var _e = 0, componentTypeMatches_1 = componentTypeMatches; _e < componentTypeMatches_1.length; _e++) {
                                        var componentTypeMatch = componentTypeMatches_1[_e];
                                        var component = new Models_1.CSharpPropertyComponent();
                                        component.type = componentTypeMatch[0];
                                        property.components.push(component);
                                    }
                                }
                            }
                        }
                        else if (openingType === "=>") {
                            var component = new Models_1.CSharpPropertyComponent();
                            component.type = "get";
                            property.components.push(component);
                        }
                        if (property.components.length === 0 || property.components.length > 2)
                            continue;
                        properties.push(property);
                    }
                    catch (ex) {
                        console.error("Skipping property due to parsing error.", statement, ex);
                        debugger;
                    }
                }
            }
        }
        return properties;
    };
    return PropertyParser;
}());
exports.PropertyParser = PropertyParser;
//# sourceMappingURL=PropertyParser.js.map