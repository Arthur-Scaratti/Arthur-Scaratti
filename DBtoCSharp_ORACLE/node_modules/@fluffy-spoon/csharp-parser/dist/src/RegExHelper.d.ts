export declare class RegExHelper {
    getLiteralNumberHexadecimalRegex(capture: boolean): string;
    getSignRegex(capture: boolean): string;
    getLiteralNumberIntegerRegex(capture: boolean): string;
    getLiteralNumberDecimalRegex(capture: boolean): string;
    getLiteralNumberRegex(capture: boolean): string;
    getLiteralStringRegex(capture: boolean): string;
    getLiteralCharacterRegex(capture: boolean): string;
    getTypeOfRegex(capture: boolean): string;
    getLiteralRegex(capture: boolean): string;
    getMethodParameterRegex(capture: boolean, captureAttributes: boolean, captureModifiers: boolean, captureType: boolean, captureName: boolean, captureDefaultValue: boolean): string;
    getMethodParametersWrapperRegex(capture: boolean, captureContents: boolean): string;
    getEnumOptionRegex(capture: boolean, captureAttributes: boolean, captureName: boolean, captureValue: boolean): string;
    getEnumRegex(capture: boolean, captureAttributes: boolean, captureModifiers: boolean, captureName: boolean, captureInheritance: boolean): string;
    getMethodRegex(capture: boolean, captureAttributes: boolean, captureModifiers: boolean, captureReturnType: boolean, captureName: boolean, captureGenericParameters: boolean, captureParameters: boolean, captureOpeningMethod: boolean): string;
    private getWildcardGroup;
    getNamespaceRegex(capture: boolean, captureFullName: boolean): string;
    getFieldRegex(capture: boolean, captureAttributes: boolean, captureModifiers: boolean, captureReturnType: boolean, captureName: boolean, captureInitialValue: boolean): string;
    getPropertyRegex(capture: boolean, captureAttributes: boolean, captureModifiers: boolean, captureReturnType: boolean, captureName: boolean, captureOpeningMethod: boolean): string;
    getPropertyInitialValueRegex(capture: boolean): string;
    getKeywordRegex(capture: boolean): string;
    getModifierRegex(capture: boolean): string;
    getModifiersRegex(capture: boolean): string;
    getAttributeParameterRegex(capture: boolean, captureName: boolean, captureValue: boolean): string;
    getAttributeParametersRegex(capture: boolean, captureContents: boolean): string;
    getAttributeRegex(capture: boolean, captureAttributeName: boolean, captureParameters: boolean): string;
    getAttributesRegex(capture: boolean): string;
    getNameRegex(capture: boolean): string;
    getGenericTypeWrapperRegex(capture: boolean, captureContents: boolean): string;
    getTypeConstraintRegex(capture: boolean): string;
    getGenericNameRegex(capture: boolean, captureTypeName: boolean, captureGenericsContent: boolean): string;
    getUsingRegex(capture: boolean, captureAlias: boolean, captureNamespace: boolean): string;
    getGenericTypeNameRegex(capture: boolean, captureTypeName: boolean, captureGenericsContent: boolean, captureTupleContent: boolean, captureSuffix: boolean): string;
    private wrapInGroup;
    private wrapInNegatedGroup;
    private repeatGroups;
    getStructRegex(): string;
    private getClassOrInterfaceRegex;
    getClassRegex(): string;
    getInterfaceRegex(): string;
    getInitialValueRegex(capture: boolean): string;
    getMatches(input: string, regex: RegExp): string[][];
}
