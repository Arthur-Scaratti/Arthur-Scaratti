"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeParser = void 0;
var Models_1 = require("./Models");
var RegExHelper_1 = require("./RegExHelper");
var LiteralParser_1 = require("./LiteralParser");
var Index_1 = require("./Index");
var AttributeParser = /** @class */ (function () {
    function AttributeParser() {
        this.regexHelper = new RegExHelper_1.RegExHelper();
        this.scopeHelper = new Index_1.ScopeHelper();
        this.literalParser = new LiteralParser_1.LiteralParser();
    }
    AttributeParser.prototype.parseAttributes = function (content) {
        var attributes = new Array();
        if (!content)
            return attributes;
        var attributeSplits = this.scopeHelper.getScopedList("", content);
        for (var _i = 0, attributeSplits_1 = attributeSplits; _i < attributeSplits_1.length; _i++) {
            var attributeSplit = attributeSplits_1[_i];
            var attributeSplitContents = attributeSplit.substr(1, attributeSplit.length - 2);
            var innerAttributeSplits = this.scopeHelper.getScopedList(",", attributeSplitContents);
            for (var _a = 0, innerAttributeSplits_1 = innerAttributeSplits; _a < innerAttributeSplits_1.length; _a++) {
                var innerAttributeSplit = innerAttributeSplits_1[_a];
                var matches = this.regexHelper.getMatches(innerAttributeSplit, new RegExp("^" + this.regexHelper.getAttributeRegex(false, true, true) + "$", "g"));
                for (var _b = 0, matches_1 = matches; _b < matches_1.length; _b++) {
                    var match = matches_1[_b];
                    try {
                        var name = match[0];
                        var parameters = match[1];
                        var attribute = new Models_1.CSharpAttribute(name);
                        attribute.parameters = this.parseAttributeParameters(parameters);
                        attributes.push(attribute);
                    }
                    catch (ex) {
                        console.error("Skipping attribute due to parsing error.", innerAttributeSplit, ex);
                        debugger;
                    }
                }
            }
        }
        return attributes;
    };
    AttributeParser.prototype.parseAttributeParameters = function (content) {
        var result = new Array();
        var splits = this.scopeHelper.getScopedList(",", content);
        for (var _i = 0, splits_1 = splits; _i < splits_1.length; _i++) {
            var split = splits_1[_i];
            var matches = this.regexHelper.getMatches(split, new RegExp("^" + this.regexHelper.getAttributeParameterRegex(false, true, true) + "$", "g"));
            for (var _a = 0, matches_2 = matches; _a < matches_2.length; _a++) {
                var match = matches_2[_a];
                var parameter = new Models_1.CSharpAttributeParameter();
                parameter.name = match[0] || null;
                parameter.value = this.literalParser.parseLiteral(match[1]);
                result.push(parameter);
            }
        }
        return result;
    };
    return AttributeParser;
}());
exports.AttributeParser = AttributeParser;
//# sourceMappingURL=AttributeParser.js.map