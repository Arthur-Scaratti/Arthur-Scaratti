"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeParser = void 0;
var Models_1 = require("./Models");
var ScopeHelper_1 = require("./ScopeHelper");
var RegExHelper_1 = require("./RegExHelper");
var NamespaceParser_1 = require("./NamespaceParser");
var TypeParser = /** @class */ (function () {
    function TypeParser() {
        this.scopeHelper = new ScopeHelper_1.ScopeHelper();
        this.regexHelper = new RegExHelper_1.RegExHelper();
    }
    TypeParser.prototype.getTypeNameFromGenericScopePrefix = function (prefix) {
        if (!prefix)
            return null;
        var result = prefix.trim();
        if (result.lastIndexOf("<") > -1) {
            result = result.substr(0, result.length - 1);
        }
        result = result.trim();
        if (result.indexOf(",") == 0) {
            result = result
                .substr(1)
                .trim();
        }
        return result;
    };
    TypeParser.prototype.prepareTypeForGenericParameters = function (type, content) {
        if (!content)
            return;
        type.genericParameters = this.parseTypesFromGenericParameters(content);
        if (type.isGeneric) {
            type.name += "<";
            for (var i = 1; i < type.genericParameters.length; i++) {
                type.name += ",";
            }
            type.name += ">";
        }
    };
    TypeParser.prototype.parseTypesFromGenericParameters = function (content) {
        var result = new Array();
        if (!content)
            return result;
        var typeRegions = this.scopeHelper.getScopedList(",", content);
        for (var _i = 0, typeRegions_1 = typeRegions; _i < typeRegions_1.length; _i++) {
            var typeRegion = typeRegions_1[_i];
            var scope = this.scopeHelper.getGenericTypeScopes(typeRegion).pop();
            var type = new Models_1.CSharpType(this.getTypeNameFromGenericScopePrefix(scope.prefix));
            var arrowTrimmedName = type.name
                .replace(/</g, "")
                .replace(/>/g, "")
                .trim();
            if (!arrowTrimmedName)
                continue;
            if (scope.content) {
                this.prepareTypeForGenericParameters(type, scope.content);
            }
            result.push(type);
        }
        return result;
    };
    TypeParser.prototype.parseType = function (typeString) {
        if (!typeString)
            return null;
        var regex = this.regexHelper.getGenericTypeNameRegex(false, true, true, true, true);
        var matches = this.regexHelper.getMatches(typeString, new RegExp("^" + regex + "$", "g"));
        var match = matches[0];
        if (!match)
            return null;
        var name = match[0];
        var genericParameters = match[1];
        var tupleContent = match[2];
        var suffix = match[3];
        if (tupleContent) {
            name = "System.ValueTuple";
            genericParameters = this.prepareGenericParametersStringFromTupleContent(tupleContent);
        }
        var isNullable = suffix === "?";
        var isArray = suffix === "[]";
        if (isArray) {
            genericParameters = name + (genericParameters ? "<" + genericParameters + ">" : "");
            name = "System.Array";
        }
        var subNames = name.split(".");
        var type = new Models_1.CSharpType(subNames[subNames.length - 1]);
        type.isNullable = isNullable;
        type.namespace = NamespaceParser_1.NamespaceParser
            .parseNamespaceFromName(subNames
            .slice(0, subNames.length - 1)
            .join("."));
        this.prepareTypeForGenericParameters(type, genericParameters);
        return type;
    };
    TypeParser.prototype.prepareGenericParametersStringFromTupleContent = function (content) {
        var _this = this;
        var scopes = this.scopeHelper.getScopedList(",", content);
        return scopes
            .map(function (x) {
            var regions = _this.scopeHelper
                .getScopedList(" ", x)
                .filter(function (x) { return !!x; });
            return regions[0];
        })
            .join(", ");
    };
    return TypeParser;
}());
exports.TypeParser = TypeParser;
//# sourceMappingURL=TypeParser.js.map