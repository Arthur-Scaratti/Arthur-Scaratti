"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("./generator");
exports.TsGenerator = generator_1.TsGenerator;
var watch = require('watch');
var config = require('./appconfig.json');
var fs = require("fs");
var path = require("path");
var shell = require('shelljs');
var generator_2 = require("./generator");
console.info("Running");
if (config.generateOnStart == true) {
    readCsDirectory(path.join(".", config.watchPaths.cs));
}
var watchPath = path.join(".", config.watchPaths.cs);
if (fs.existsSync(watchPath)) {
    StartWatch(watchPath);
}
function StartWatch(watchPath) {
    watch.watchTree(watchPath, { ignoreNotPermitted: true, ignoreUnreadableDir: true, ignoreDotFiles: true }, function (file, curr, prev) {
        try {
            console.info("Wathing started on " + watchPath);
            if (typeof file == "object" && prev === null && curr === null) {
            }
            else if (prev === null) {
                fs.stat(file, function (error, stat) {
                    if (error) {
                        console.error("Error stating file.", error);
                        return;
                    }
                    if (stat.isFile() && file.endsWith('.cs')) {
                        console.info("created file: " + file);
                        generateTsFromCs(file);
                    }
                    else if (stat.isDirectory()) {
                        console.log("created folder: " + file);
                        readCsDirectory(file);
                    }
                });
            }
            else if (curr.nlink === 0) {
                console.info("removed: " + file);
                removeTs(file);
            }
            else {
                console.info("changed: " + file);
                generateTsFromCs(file);
            }
        }
        catch (e) {
            console.error(e);
        }
    });
}
function removeTs(csFile) {
    try {
        var tsFile = path.join(config.watchPaths.ts, csFile.replace(config.watchPaths.cs, ""));
        tsFile = tsFile.replace(".cs", ".ts");
        if (fs.existsSync(tsFile)) {
            fs.stat(tsFile, function (error, stat) {
                if (error) {
                    console.error("Error stating file.", error);
                    return;
                }
                if (stat.isFile()) {
                    fs.unlink(tsFile, function (a) {
                        console.log(a);
                    });
                    console.info("removed ts file: " + tsFile);
                }
                else if (stat.isDirectory()) {
                    deleteFolderRecursive(tsFile);
                    console.info("removed ts directory: " + tsFile);
                }
            });
        }
        else {
            console.warn("File can't be removed because it doesn't exist: " + tsFile);
        }
    }
    catch (e) {
        console.error("failed to removed ts file: " + tsFile);
        console.error(e);
    }
}
var deleteFolderRecursive = function (path) {
    if (fs.existsSync(path)) {
        fs.readdirSync(path).forEach(function (file, index) {
            var curPath = path + "/" + file;
            if (fs.lstatSync(curPath).isDirectory()) {
                deleteFolderRecursive(curPath);
            }
            else {
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(path);
    }
};
function readCsDirectory(rootPath) {
    try {
        fs.readdir(rootPath, function (err, files) {
            if (err) {
                console.error("Could not list the directory.", err);
                return;
            }
            files.forEach(function (file, index) {
                var fromPath = path.join(rootPath, file);
                fs.stat(fromPath, function (error, stat) {
                    if (error) {
                        console.error("Error stating file.", error);
                        return;
                    }
                    if (stat.isFile() && fromPath.endsWith('.cs')) {
                        console.log("'%s' is a file.", fromPath);
                        generateTsFromCs(fromPath);
                    }
                    else if (stat.isDirectory()) {
                        console.info("'%s' is a directory.", fromPath);
                        readCsDirectory(fromPath);
                    }
                });
            });
        });
    }
    catch (e) {
        console.error("Failed to read the directory " + rootPath);
    }
}
function generateTsFromCs(file) {
    try {
        var csFile = fs.readFileSync(file, 'utf8');
        var generator = new generator_2.TsGenerator(csFile);
        var typescriptCode = generator.GetTypescriptCode();
        var newFileName = path.join(config.watchPaths.ts, file.replace(config.watchPaths.cs, ""));
        newFileName = newFileName.replace(".cs", ".ts");
        var dirname = path.dirname(newFileName);
        if (!fs.existsSync(dirname)) {
            shell.mkdir('-p', dirname);
        }
        fs.writeFile(newFileName, typescriptCode, 'utf-8', function (err) {
            if (err) {
                console.log('failed to save ' + newFileName + '. ' + err);
            }
            else {
                console.log("succesfully saved " + newFileName);
            }
        });
    }
    catch (e) {
        console.error("Failed to generate the ts file" + file);
        console.error(e);
    }
}
function getFileName(filePath) {
    return filePath.replace(/\\$/, '').split('\\').pop();
}
//# sourceMappingURL=app.js.map