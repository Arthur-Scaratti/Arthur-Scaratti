
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Models
{
    public class BEG_EST_MOVTO_ESTOQUE
    {
            [Required]
    [Key]
        /// <summary>
        /// Id do movimneto do estoque
        /// </summary>
        public int BEG_EST_MOVTO_ESTOQUE_ID { get; set; }
            [Required]
        /// <summary>
        /// Empresa
        /// </summary>
        public int AD_CLIENT_ID { get; set; }
            [Required]
        /// <summary>
        /// Filial correspondente
        /// </summary>
        public int AD_ORG_ID { get; set; }
            [Required]
    [StringLength(1)]
        /// <summary>
        /// Ativo (Y/N)
        /// </summary>
        public string ISACTIVE { get; set; }
            [Required]
        /// <summary>
        /// Data criacao do registro
        /// </summary>
        public string CREATED { get; set; }
            [Required]
        /// <summary>
        /// Usuario que criou o registro
        /// </summary>
        public int CREATEDBY { get; set; }
            [Required]
        /// <summary>
        /// Data ultima alteracao do registro
        /// </summary>
        public string UPDATED { get; set; }
            [Required]
        /// <summary>
        /// Usuario que fez a ultima alteracao registro
        /// </summary>
        public int UPDATEDBY { get; set; }
            [Required]
        /// <summary>
        /// Id do tipo de especie
        /// </summary>
        public int BEG_EST_TP_ESPECIE_ID { get; set; }
        
        /// <summary>
        /// Id do sku do produto
        /// </summary>
        public int BEG_PRD_SKU_ID { get; set; }
        
        /// <summary>
        /// id do almoxarifado origem
        /// </summary>
        public int BEG_EST_ALMOXARIFADO_ID { get; set; }
        
        /// <summary>
        /// id do almoxarfiado destinado
        /// </summary>
        public int BEG_EST_VW_ALMOX_DESTINO_ID { get; set; }
            [Required]
        /// <summary>
        /// Valor do movimento
        /// </summary>
        public int VLR_MOVTO { get; set; }
            [Required]
        /// <summary>
        /// Quantidade movimentada
        /// </summary>
        public int QTD_MOVTO { get; set; }
            [Required]
        /// <summary>
        /// Id do produto
        /// </summary>
        public int BEG_PRODUTO_ID { get; set; }
        
        /// <summary>
        /// Id do aku (falso)
        /// </summary>
        public int BEG_SKU_ID { get; set; }
            [StringLength(100)]
        /// <summary>
        /// Numero do documento
        /// </summary>
        public string DOCUMENTO { get; set; }
        
        /// <summary>
        /// Data do movimento (dd/mm/rrrr)
        /// </summary>
        public string DATA { get; set; }

        [NotMapped]
        public string Trigger_TRG_DB_MOVTO_ESTOQUE { get; set; } = `{"triggering_event":"DELETE","trigger_body":"declare\n\npragma autonomous_transaction;\n\nbegin\n\nDIE_PRC_CALCULA_SALDO(:OLD.BEG_PRODUTO_ID);\n\ncommit;\nend;\n"}`;
    
        [NotMapped]
        public string Trigger_BEG_TRG_SKU_00027 { get; set; } = `{"triggering_event":"INSERT OR UPDATE","trigger_body":"begin\n  if not BEG_FNC_VALIDA_SKU(:new.BEG_PRODUTO_ID, :new.BEG_PRD_SKU_ID) then\n    RAISE_APPLICATION_ERROR(-20001, ' SKU INV√ÅLIDO PARA O PRODUTO ! ! ! '||:new.beg_produto_id||' - '||:new.beg_prd_sku_id);\n  end if;\nend;\n"}`;
    
        [NotMapped]
        public string Trigger_TRG_BIUD_MOVTO_ESTOQUE { get; set; } = `{"triggering_event":"INSERT OR UPDATE OR DELETE","trigger_body":"declare\n  v_retorno    varchar2(1000);\n  V_ALMOX      number(10);\n  V_ESTOQUE_ID number(10);\n  -- local variables here\n  cursor BUSCA_TP_ESPECIE is\n    select *\n      from BEG_EST_TP_ESPECIE\n     where BEG_EST_TP_ESPECIE_ID = :new.BEG_EST_TP_ESPECIE_ID;\n  --\n  VREG1 BUSCA_TP_ESPECIE%rowtype;\n  --\n  cursor BUSCA_ALMOXARIFADO is\n    select *\n      from BEG_EST_ALMOXARIFADO\n     where BEG_EST_ALMOXARIFADO_ID = V_ALMOX;\n--     and isactive = 'Y';\n  --\n  VREG2 BUSCA_ALMOXARIFADO%rowtype;\n  --\n  cursor VALIDA_SKU is\n    select *\n      from BEG_PRD_SKU\n     where BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n       and BEG_PRODUTO_ID = NVL(:new.BEG_PRODUTO_ID, BEG_PRODUTO_ID);\n  --\n  VREG3 VALIDA_SKU%rowtype;\n  --\n  cursor BUSCA_LOGISTICA is\n    select *\n      from BEG_PRD_LOGISTICA\n     where BEG_PRODUTO_ID = VREG3.BEG_PRODUTO_ID;\n  --\n  VREG4 BUSCA_LOGISTICA%rowtype;\n  --\n  cursor BUSCA_ESTOQUE is\n    select *\n      from BEG_ESTOQUE\n     where BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n       and BEG_EST_ALMOXARIFADO_ID = V_ALMOX;\n  --\n  VREG5 BUSCA_ESTOQUE%rowtype;\n  --\n  -- local variables here\n  cursor C_PRODUTO is\n    select A.DIE_COD_ESTRUTURADO value,\n           A.DESC_RESUMIDA DESCRICAO\n      from BEG_PRODUTO A\n     where A.BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID;\n  --\n  R_PRODUTO C_PRODUTO%rowtype;\n  --\n  cursor C_ALMOX is\n    select A.AD_ORG_ID,\n           A.AD_CLIENT_ID\n      from BEG_EST_ALMOXARIFADO A\n     where A.BEG_EST_ALMOXARIFADO_ID = NVL(:new.BEG_EST_ALMOXARIFADO_ID, 0)\n        or A.BEG_EST_ALMOXARIFADO_ID =\n           NVL(:new.BEG_EST_VW_ALMOX_DESTINO_ID, 0);\n--           and a.isactive ='Y';\n  --\n  R_ALMOX C_ALMOX%rowtype;\n  --\nbegin\n\n  if (INSERTING\n     or UPDATING )\n     AND :NEW.DATA IS NULL then\n    :new.DATA    := TRUNC(:new.CREATED);\n    :new.CREATED := sysdate;\n    :new.UPDATED := sysdate;\n  end if;\n  if DELETING then\n    \n    RETURN;   --Retira o comentario para permitir a exclusao.\n    RAISE_APPLICATION_ERROR(-20502, 'Movimento nao pode ser excluido.');  \n  elsif INSERTING then\n    open C_PRODUTO;\n    fetch C_PRODUTO\n      into R_PRODUTO;\n    close C_PRODUTO;\n  \n    --    raise_application_error(-20501, 'almox '||:new.beg_est_almoxarifado_id||' dest '||:new.beg_est_vw_almox_destino_id);\n    open C_ALMOX;\n    fetch C_ALMOX\n      into R_ALMOX;\n    close C_ALMOX;\n    :new.AD_ORG_ID    := R_ALMOX.AD_ORG_ID;\n    :new.AD_CLIENT_ID := R_ALMOX.AD_CLIENT_ID;\n    open VALIDA_SKU;\n    fetch VALIDA_SKU\n      into VREG3;\n  /*  if VALIDA_SKU%notfound then\n      RAISE_APPLICATION_ERROR(-20502,\n                              'SKU n?o cadastrado para o produto <' ||\n                              R_PRODUTO.value || '>.');\n    end if;*/\n    close VALIDA_SKU;\n    open BUSCA_LOGISTICA;\n    fetch BUSCA_LOGISTICA\n      into VREG4;\n    if BUSCA_LOGISTICA%notfound then\n      RAISE_APPLICATION_ERROR(-20502,\n                              'Dados logisticos n?o cadastrados para o produto <' ||\n                              R_PRODUTO.value || '>.');\n    end if;\n    close BUSCA_LOGISTICA;\n    if :new.BEG_PRODUTO_ID is null then\n      :new.BEG_PRODUTO_ID := VREG3.BEG_PRODUTO_ID;\n    end if;\n--    if mod(:new.QTD_MOVTO, VREG4.LOTE_MULTIPLO) <> 0 then\n--      RAISE_APPLICATION_ERROR(-20501,\n--                              'Produto <' || R_PRODUTO.value ||\n--                              '> esta sendo baixado fora do lote multiplo (' ||\n--                              VREG4.LOTE_MULTIPLO || ')');\n--    end if;\n    open BUSCA_TP_ESPECIE;\n    fetch BUSCA_TP_ESPECIE\n      into VREG1;\n    if BUSCA_TP_ESPECIE%notfound then\n      RAISE_APPLICATION_ERROR(-20503,\n                              'Especie de movimento nao cadastrado.' ||\n                              :new.BEG_EST_TP_ESPECIE_ID);\n    end if;\n    close BUSCA_TP_ESPECIE;\n    --\n    if vreg1.tp_movto = 'I' then\n\n       return;\n       \n    end if;\n    if VREG1.TP_MOVTO = 'D' then\n      V_ALMOX := :new.BEG_EST_ALMOXARIFADO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.' ||\n                                V_ALMOX);\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :new.BEG_EST_VW_ALMOX_DESTINO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino nao deve ser informado.');\n      end if;\n      --\n      --v_retorno := bkn_prc_inicializa_estoque(r_produto.value,:new.ad_org_id);\n      \n      ---- comentado em 01/02/2022 bloco abaixo para liberar estoque negativo\n    /*  open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD < :new.QTD_MOVTO) and :NEW.AD_ORG_ID in (1000016,1000134) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa ou o produto nao esta inicializado no estoque desta filial.' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      end if;\n      close BUSCA_ESTOQUE;*/\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           - :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    elsif VREG1.TP_MOVTO = 'S' then\n      V_ALMOX := :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :new.BEG_EST_ALMOXARIFADO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem nao deve ser informado.');\n      end if;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = V_ALMOX;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           V_ALMOX,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    else       \n        \n      V_ALMOX := :new.BEG_EST_ALMOXARIFADO_ID;       \n       \n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD < :new.QTD_MOVTO and :NEW.AD_ORG_ID in (1000016,1000134)) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa para este item. ' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      end if;\n      close BUSCA_ESTOQUE;\n      --\n      V_ALMOX := :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           - :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_VW_ALMOX_DESTINO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    end if;\n    --\n    if VREG1.BAIXA_RESERVA = 'Y' then\n      update BEG_ESTOQUE\n         set QTD_RESERVADA = QTD_RESERVADA - NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if BEG_FNC_RETORNA_PARAMETRO(:new.AD_CLIENT_ID,\n                                   :new.AD_ORG_ID,\n                                   'Estoque',\n                                   null,\n                                   'LOGAR_RESERVAS') = 'Y' then\n        insert into BEG_EST_LOG_RESERVA\n          (BEG_EST_LOG_RESERVA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           MOVIMENTO,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_EST_VW_ALMOX_DESTINO_ID,\n           QTD_MOVTO,\n           BEG_PRODUTO_ID,\n           DOCUMENTO,\n           DATA,\n           TP_MOVTO)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_EST_LOG_RESERVA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           sysdate,\n           :new.CREATEDBY,\n           sysdate,\n           :new.UPDATEDBY,\n           'MOVIMENTO DE BAIXA POR FATURAMENTO ',\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           null,\n           NVL(:new.QTD_MOVTO, 0),\n           :new.BEG_PRODUTO_ID,\n           :new.DOCUMENTO,\n           TRUNC(sysdate),\n           'B');\n      end if;\n    end if;\n  else\n    --\n    -- desfazendo o procedimento anterior\n    --\n    open BUSCA_TP_ESPECIE;\n    fetch BUSCA_TP_ESPECIE\n      into VREG1;\n    if BUSCA_TP_ESPECIE%notfound then\n      RAISE_APPLICATION_ERROR(-20503,\n                              'Especie de movimento nao cadastrado.' ||\n                              :new.BEG_EST_TP_ESPECIE_ID);\n    end if;\n    close BUSCA_TP_ESPECIE;\n    --\n    if VREG1.TP_MOVTO = 'D' then\n      V_ALMOX := :old.BEG_EST_ALMOXARIFADO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :old.BEG_EST_VW_ALMOX_DESTINO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino nao deve ser informado.');\n      end if;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:old.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :old.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :old.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :old.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :old.AD_CLIENT_ID,\n           :old.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :old.CREATEDBY,\n           :old.UPDATED,\n           :old.UPDATEDBY,\n           :old.QTD_MOVTO,\n           :old.BEG_PRD_SKU_ID,\n           :old.BEG_EST_ALMOXARIFADO_ID,\n           :old.BEG_PRODUTO_ID);\n      end if;\n      --\n    elsif VREG1.TP_MOVTO = 'S' then\n      V_ALMOX := :old.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :old.BEG_EST_ALMOXARIFADO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem nao deve ser informado.');\n      end if;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:old.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :old.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :old.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = V_ALMOX;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :old.AD_CLIENT_ID,\n           :old.AD_ORG_ID,\n           'Y',\n           :old.CREATED,\n           :old.CREATEDBY,\n           :old.UPDATED,\n           :old.UPDATEDBY,\n           - :old.QTD_MOVTO,\n           :old.BEG_PRD_SKU_ID,\n           V_ALMOX,\n           :old.BEG_PRODUTO_ID);\n      end if;\n      --\n    else\n      --\n      V_ALMOX := :old.BEG_EST_ALMOXARIFADO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      V_ALMOX := :old.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      V_ALMOX := :old.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:old.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :old.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :old.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :old.BEG_EST_VW_ALMOX_DESTINO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :old.AD_CLIENT_ID,\n           :old.AD_ORG_ID,\n           'Y',\n           :old.CREATED,\n           :old.CREATEDBY,\n           :old.UPDATED,\n           :old.UPDATEDBY,\n           - :old.QTD_MOVTO,\n           :old.BEG_PRD_SKU_ID,\n           :old.BEG_EST_VW_ALMOX_DESTINO_ID,\n           :old.BEG_PRODUTO_ID);\n      end if;\n      --\n      V_ALMOX := :old.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:old.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :old.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :old.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :old.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :old.AD_CLIENT_ID,\n           :old.AD_ORG_ID,\n           'Y',\n           :old.CREATED,\n           :old.CREATEDBY,\n           :old.UPDATED,\n           :old.UPDATEDBY,\n           :old.QTD_MOVTO,\n           :old.BEG_PRD_SKU_ID,\n           :old.BEG_EST_ALMOXARIFADO_ID,\n           :old.BEG_PRODUTO_ID);\n      end if;\n      --\n    end if;\n    --\n    -- acerta novo movimento de estoque\n    --\n    open VALIDA_SKU;\n    fetch VALIDA_SKU\n      into VREG3;\n    if VALIDA_SKU%notfound then\n      RAISE_APPLICATION_ERROR(-20502,\n                              'SKU n?o cadastrado para o produto <' ||\n                              R_PRODUTO.value || '>.');\n    end if;\n    close VALIDA_SKU;\n    open BUSCA_LOGISTICA;\n    fetch BUSCA_LOGISTICA\n      into VREG4;\n    if BUSCA_LOGISTICA%notfound then\n      RAISE_APPLICATION_ERROR(-20502,\n                              'Dados logisticos n?o cadastrados para o produto <' ||\n                              R_PRODUTO.value || '>.');\n    end if;\n    close BUSCA_LOGISTICA;\n   /* if mod(:new.QTD_MOVTO, VREG4.LOTE_MULTIPLO) <> 0 then\n      RAISE_APPLICATION_ERROR(-20501,\n                              'Produto <' || R_PRODUTO.value ||\n                              '> esta sendo baixado fora do lote multiplo (' ||\n                              VREG4.LOTE_MULTIPLO || ')');\n    end if;*/\n    open BUSCA_TP_ESPECIE;\n    fetch BUSCA_TP_ESPECIE\n      into VREG1;\n    if BUSCA_TP_ESPECIE%notfound then\n      RAISE_APPLICATION_ERROR(-20503,\n                              'Especie de movimento nao cadastrado.' ||\n                              :new.BEG_EST_TP_ESPECIE_ID);\n    end if;\n    close BUSCA_TP_ESPECIE;\n    --\n    if VREG1.TP_MOVTO = 'D' then\n      V_ALMOX := :new.BEG_EST_ALMOXARIFADO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :new.BEG_EST_VW_ALMOX_DESTINO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino nao deve ser informado.');\n      end if;\n      --\n      open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD < :new.QTD_MOVTO and :NEW.AD_ORG_ID in (1000016,1000134)) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa para este item.' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      \n      end if;\n      close BUSCA_ESTOQUE;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           - :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    elsif VREG1.TP_MOVTO = 'S' then\n      V_ALMOX := :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      if :new.BEG_EST_ALMOXARIFADO_ID is not null then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem nao deve ser informado.');\n      end if;\n      --\n      open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD + :new.QTD_MOVTO < 0 and :NEW.AD_ORG_ID in (1000016,1000134)) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa para este item.' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      \n      end if;\n      close BUSCA_ESTOQUE;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = V_ALMOX;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           V_ALMOX,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    else\n      V_ALMOX := :new.BEG_EST_ALMOXARIFADO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de origem inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD < :new.QTD_MOVTO and :NEW.AD_ORG_ID in (1000016,1000134)) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa para este item.' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      end if;\n      close BUSCA_ESTOQUE;\n      --\n      V_ALMOX := :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      open BUSCA_ALMOXARIFADO;\n      fetch BUSCA_ALMOXARIFADO\n        into VREG2;\n      if BUSCA_ALMOXARIFADO%notfound then\n        RAISE_APPLICATION_ERROR(-20504,\n                                'Almoxarifado de destino inexistente.');\n      end if;\n      close BUSCA_ALMOXARIFADO;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD - NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           - :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n      open BUSCA_ESTOQUE;\n      fetch BUSCA_ESTOQUE\n        into VREG5;\n      if BUSCA_ESTOQUE%notfound\n         or (NVL(VREG4.ACEITA_NEGATIVO, 'N') = 'N' and\n         VREG5.QTD + :new.QTD_MOVTO < 0 and :NEW.AD_ORG_ID in (1000016,1000134)) then\n        RAISE_APPLICATION_ERROR(-20501,\n                                'Qtd em estoque nao pode ser negativa para este item.' ||\n                                R_PRODUTO.value || '-' ||\n                                R_PRODUTO.DESCRICAO || '-' ||\n                                :new.BEG_EST_ALMOXARIFADO_ID || '-' ||\n                                VREG4.ACEITA_NEGATIVO || '-' || VREG5.QTD || '-' ||\n                                :new.BEG_PRD_SKU_ID);\n      end if;\n      close BUSCA_ESTOQUE;\n      --\n      update BEG_ESTOQUE\n         set QTD = QTD + NVL(:new.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_VW_ALMOX_DESTINO_ID;\n      --\n      if sql%notfound then\n        AD_SEQUENCE_NEXT('BEG_ESTOQUE', 0, V_ESTOQUE_ID);\n        insert into BEG_ESTOQUE\n          (BEG_ESTOQUE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           QTD,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_PRODUTO_ID)\n        values\n          (V_ESTOQUE_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.QTD_MOVTO,\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_VW_ALMOX_DESTINO_ID,\n           :new.BEG_PRODUTO_ID);\n      end if;\n      --\n    end if;\n    if VREG1.BAIXA_RESERVA = 'Y' then\n      update BEG_ESTOQUE\n         set QTD_RESERVADA = QTD_RESERVADA - NVL(:new.QTD_MOVTO, 0) +\n                             NVL(:old.QTD_MOVTO, 0)\n       where BEG_PRODUTO_ID = :new.BEG_PRODUTO_ID\n         and BEG_PRD_SKU_ID = :new.BEG_PRD_SKU_ID\n         and BEG_EST_ALMOXARIFADO_ID = :new.BEG_EST_ALMOXARIFADO_ID;\n      --\n      if BEG_FNC_RETORNA_PARAMETRO(:new.AD_CLIENT_ID,\n                                   :new.AD_ORG_ID,\n                                   'Estoque',\n                                   null,\n                                   'LOGAR_RESERVAS') = 'Y' then\n        insert into BEG_EST_LOG_RESERVA\n          (BEG_EST_LOG_RESERVA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           MOVIMENTO,\n           BEG_PRD_SKU_ID,\n           BEG_EST_ALMOXARIFADO_ID,\n           BEG_EST_VW_ALMOX_DESTINO_ID,\n           QTD_MOVTO,\n           BEG_PRODUTO_ID,\n           DOCUMENTO,\n           DATA,\n           TP_MOVTO)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_EST_LOG_RESERVA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           'Y',\n           sysdate,\n           :new.CREATEDBY,\n           sysdate,\n           :new.UPDATEDBY,\n           'MOVIMENTO DE BAIXA POR FATURAMENTO ',\n           :new.BEG_PRD_SKU_ID,\n           :new.BEG_EST_ALMOXARIFADO_ID,\n           null,\n           NVL(:new.QTD_MOVTO, 0) + NVL(:old.QTD_MOVTO, 0),\n           :new.BEG_PRODUTO_ID,\n           :new.DOCUMENTO,\n           TRUNC(sysdate),\n           'B');\n      end if;\n    end if;\n -- <<FINISH_PROCESS>>\n  end if;\nend TRG_BIUD_MOVTO_ESTOQUE;\n"}`;
    
    }
}
