
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Models
{
    public class BEG_APEX_USER
    {
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public string IND_SUPERVISOR_TELEVENDAS { get; set; }
            [Required]
        /// <summary>
        /// Permite ao usuario cancelar pedidos de venda. Na filial 15 acessa o simulador.
        /// </summary>
        public string IND_SUPERVISOR_VENDAS { get; set; }
            [Required]
        /// <summary>
        /// Indica que é gerente da loja.
        /// </summary>
        public string IND_GERENTE_VENDAS { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public string IND_TELE_VENDEDOR { get; set; }
            [Required]
        /// <summary>
        /// Permite ao usuario dar entrada em nf de transferencia recebida e gere pedido de ressuprimento
        /// </summary>
        public string IND_SEPARADOR { get; set; }
            [Required]
        /// <summary>
        /// Indica que é vendedor
        /// </summary>
        public string IND_VENDEDOR { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public string IND_COMPRADOR { get; set; }
            [Required]
    [StringLength(14)]
        /// <summary>
        /// 
        /// </summary>
        public string CPFCNPJ { get; set; }
            [StringLength(14)]
        /// <summary>
        /// 
        /// </summary>
        public string CPFCNPJ_REPRESENTADA { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int BEG_PESSOA_ID { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int AD_ROLE_ID { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int BEG_PRD_GPR_FORN_ID { get; set; }
            [StringLength(3)]
        /// <summary>
        /// 
        /// </summary>
        public string TIPO { get; set; }
            [Required]
        /// <summary>
        /// Indicativo de aprovador pela matriz nivel1. Pedidos com excecao crediario
        /// </summary>
        public string IND_ANALISTA_CREDITO { get; set; }
            [Required]
        /// <summary>
        /// Indicativo de aprovador pela matriz nivel2 , Alcada maior para liberacao. Inclui pedidos crediario.
        /// </summary>
        public string IND_SUPERVISOR_CREDITO { get; set; }
            [Required]
        /// <summary>
        /// Indicativo de supervisor no sistema. Alcada que permite cancelamentos de NF,etc.
        /// </summary>
        public string IND_SUPERVISOR_SISTEMA { get; set; }
            [Required]
        /// <summary>
        /// Indicativo de supervisor de cobranca para aprovar renegociacao
        /// </summary>
        public string IND_SUPERVISOR_COBRANCA { get; set; }
            [Required]
        /// <summary>
        /// Indicativo de aprovador de precos abaixo das condicoes normais e promocoes.
        /// </summary>
        public string IND_LIBERA_PRECO { get; set; }
            [Required]
    [Key]
        /// <summary>
        /// 
        /// </summary>
        public int BEG_APEX_USER_ID { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int AD_CLIENT_ID { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int AD_ORG_ID { get; set; }
            [Required]
    [StringLength(1)]
        /// <summary>
        /// 
        /// </summary>
        public string ISACTIVE { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public string CREATED { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int CREATEDBY { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public string UPDATED { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int UPDATEDBY { get; set; }
            [Required]
    [StringLength(10)]
        /// <summary>
        /// 
        /// </summary>
        public string VALUE { get; set; }
            [Required]
        /// <summary>
        /// 
        /// </summary>
        public int AD_USER_ID { get; set; }
            [Required]
        /// <summary>
        /// Indica que é um cobrador
        /// </summary>
        public string IND_COBRADOR { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int BEG_VW_TELEVENDA_ID { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int BEG_EST_ALMOXARIFADO_ID { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int BEG_VEN_COTA_FAIXA_ID { get; set; }
            [Required]
    [StringLength(30)]
        /// <summary>
        /// 
        /// </summary>
        public string USUARIO { get; set; }
            [Required]
    [StringLength(15)]
        /// <summary>
        /// 
        /// </summary>
        public string SENHA { get; set; }
            [Required]
        /// <summary>
        /// Indica que é operador de caixa
        /// </summary>
        public string IND_CAIXA { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public int BEG_VW_REPRESENTANTE_ID { get; set; }
            [StringLength(80)]
        /// <summary>
        /// 
        /// </summary>
        public string EMAIL { get; set; }
            [Required]
        /// <summary>
        /// Permite que o usuario efetue liberacao de pedidos cfme regra da loja.
        /// </summary>
        public string IND_CREDIARISTA { get; set; }

        [NotMapped]
        public string Trigger_DIE_AI_USER_TP_PEDIDO { get; set; } = `{"triggering_event":"INSERT","trigger_body":"DECLARE\n\n  CURSOR C2 IS\n    SELECT P.* FROM BEG_VEN_TIPO_PEDIDO P WHERE P.ISACTIVE = 'Y';\n\nBEGIN\n\n  IF :NEW.AD_ORG_ID = 1000016 THEN\n  \n    FOR Y IN C2 LOOP\n    \n      INSERT INTO DIE_USER_TP_PEDIDO\n        (DIE_USER_TP_PEDIDO_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY,\n         VALUE,\n         AD_USER_ID,\n         BEG_APEX_USER_ID,\n         BEG_VEN_TIPO_PEDIDO_ID)\n      VALUES\n        (BEG_FNC_AD_SEQUENCE('DIE_USER_TP_PEDIDO'),\n         :NEW.AD_CLIENT_ID,\n         :NEW.AD_ORG_ID,\n         'N', --ISACTIVE               ,\n         SYSDATE, --CREATED                ,\n         :NEW.CREATEDBY,\n         SYSDATE, --UPDATED                ,\n         :NEW.UPDATEDBY,\n         :NEW.VALUE,\n         :NEW.AD_USER_ID,\n         :NEW.BEG_APEX_USER_ID,\n         Y.BEG_VEN_TIPO_PEDIDO_ID);\n    END LOOP;\n  \n  END IF;\n\nEND;\n"}`;
    
        [NotMapped]
        public string Trigger_BEG_TRG_BIU_APEX_USER { get; set; } = `{"triggering_event":"INSERT OR UPDATE","trigger_body":"declare\n\n  cursor C_PESSOA is\n    select BEG_PESSOA_ID\n          ,PES.NOME\n          ,PES.CPFCNPJ\n      from BEG_PESSOA PES\n     where PES.BEG_PESSOA_ID = :NEW.BEG_PESSOA_ID;\n  --  where PES.CPFCNPJ = :new.CPFCNPJ; -- AOK -- 21/10/2008\n  RPESSOA C_PESSOA%rowtype;\n\n  cursor C_FILIAL is\n    select PES.BEG_PESSOA_ID\n          ,PES.CPFCNPJ\n          ,DORG.BEG_PESSOA_ID FILIAL_ID\n      from AD_ORG          ORG\n          ,BEG_DADO_FILIAL DORG\n          ,BEG_PESSOA      PES\n     where ORG.AD_ORG_ID = :NEW.AD_ORG_ID\n       and ORG.AD_ORG_ID = DORG.AD_ORG_ID\n       and DORG.BEG_PESSOA_ID = PES.BEG_PESSOA_ID;\n  R_FILIAL C_FILIAL%rowtype;\n\n  /*  cursor C_REPRESENTADA is\n      select BEG_PESSOA_ID\n        from BEG_PESSOA PES\n       where PES.CPFCNPJ = :new.CPFCNPJ_REPRESENTADA;\n  */\n  -- AOK - 16/10/2008\n  cursor CUSER is\n    select * from AD_USER X where X.NAME = :NEW.USUARIO;\n  RUSER CUSER%rowtype;\n  --\n  cursor CROLE(PAD_USER_ID number,\n               PAD_ROLE_ID number default 0) is\n    select *\n      from AD_USER_ROLES R\n     where R.AD_USER_ID = PAD_USER_ID\n       and (R.AD_ROLE_ID = PAD_ROLE_ID or PAD_ROLE_ID = 0);\n  RROLE CROLE%rowtype;\n  --\n  --V_BEG_PESSOA_ID       number(10);   -- AOK -- 21/10/2008\n  --V_BEG_PESSOA_NOME     varchar(100); -- AOK -- 21/10/2008\n  --V_BEG_REPRESENTADA_ID number(10);\n  V_AD_USER_ID number(10);\n  --\nbegin\n\n  :NEW.IND_COBRADOR := 'Y';\n\n\n  --Validando Filial\n  if :NEW.AD_ORG_ID = 0 then\n    RAISE_APPLICATION_ERROR(-20001\n                           ,'Filial do usuário deve ser informada !');\n  end if;\n\n/*  --Validando Cód. Venda para vendedores\n  if :NEW.IND_VENDEDOR = 'Y' then\n    if :NEW.VALUE > 999999 then\n    \n      RAISE_APPLICATION_ERROR(-20001\n                             ,'Código do vendedor deve ser informado ou não pode ser superior a 999999 !');\n    end if;\n    --\n    if UPDATING('value') then\n      update BEG_PESSOA P\n         set P.COD_VENDA = :NEW.VALUE\n       where P.BEG_PESSOA_ID = :NEW.BEG_PESSOA_ID;\n      update BEG_PESSOA_RELACIONADA PR\n         set PR.COD_VENDA = :NEW.VALUE\n       where PR.BEG_PESSOA_ID = :NEW.BEG_PESSOA_ID\n         and PR.BEG_TP_PESSOA_RELACIONADA = 'PPO';\n    end if;\n    --                            \n  end if;*/\n\n  --  Alteração do Usuario - altera-se na ad_user\n  if UPDATING('usuario') then\n    update AD_USER U\n       set U.NAME = :NEW.USUARIO\n     where U.AD_USER_ID = :NEW.AD_USER_ID;\n  end if;\n\n  --  Alteração da Senha - altera-se na ad_user -- AOK - 07/11/2008\n  if UPDATING('senha') then\n    update AD_USER U\n       set U.PASSWORD = :NEW.SENHA\n     where U.AD_USER_ID = :NEW.AD_USER_ID;\n  end if;\n  if UPDATING('email') then\n    update AD_USER U\n       set U.EMAIL     = :NEW.EMAIL\n          ,U.EMAILUSER = :NEW.EMAIL\n     where U.AD_USER_ID = :NEW.AD_USER_ID;\n  end if;\n\n  --Validando Pessoa\n  open C_PESSOA;\n  fetch C_PESSOA\n    into RPESSOA;\n  --into V_BEG_PESSOA_ID, V_BEG_PESSOA_NOME;\n  if C_PESSOA%notfound then\n    close C_PESSOA;\n    RAISE_APPLICATION_ERROR(-20001\n                           ,'CPF não encontrado! Parceiro deve ser cadastrado.');\n  end if;\n  /*  if V_BEG_PESSOA_ID is null then\n      close C_PESSOA;\n      RAISE_APPLICATION_ERROR(-20001,\n                              'CPF não encontrado ! Parceiro deve ser cadastrado.');\n    end if;\n  */\n  close C_PESSOA;\n\n  --  :new.BEG_PESSOA_ID := V_BEG_PESSOA_ID;\n  :NEW.CPFCNPJ := RPESSOA.CPFCNPJ;\n\n  --Diementz (representada = filial)\n  --Validando a representada (LOJA)\n  if (:NEW.AD_ORG_ID <> NVL(:OLD.AD_ORG_ID, 0) or\n     :NEW.CPFCNPJ_REPRESENTADA is null)\n     and (:NEW.IND_VENDEDOR = 'Y' or :NEW.IND_GERENTE_VENDAS = 'Y' or\n     :NEW.IND_CREDIARISTA = 'Y' or :NEW.IND_CAIXA = 'Y') then\n    open C_FILIAL;\n    fetch C_FILIAL\n      into R_FILIAL;\n    if C_FILIAL%notfound then\n      close C_FILIAL;\n      RAISE_APPLICATION_ERROR(-20001\n                             ,'CNPJ representada (LOJA) não encontrada!');\n    end if;\n    close C_FILIAL;\n  \n    :NEW.CPFCNPJ_REPRESENTADA := R_FILIAL.CPFCNPJ;\n  end if;\n  -- Consistencia da role com as funcoes\n  if (NVL(:NEW.AD_ROLE_ID, 0) <> NVL(:OLD.AD_ROLE_ID, 0)) then\n  \n    if :NEW.AD_ROLE_ID in\n      \n       (/*BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral'\n                                   ,SUBMODULO => null\n                                   ,PARAMETRO => 'ROLE_COBRANCA')\n       ,*/BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral'\n                                   ,SUBMODULO => null\n                                   ,PARAMETRO => 'ROLE_CAIXA_LOJA')\n       ,BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral'\n                                   ,SUBMODULO => null\n                                   ,PARAMETRO => 'ROLE_CREDIARIO_LOJA')\n      /* ,BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral'\n                                   ,SUBMODULO => null\n                                   ,PARAMETRO => 'ROLE_VENDEDOR_LOJA')*/\n       ,BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral'\n                                   ,SUBMODULO => null\n                                   ,PARAMETRO => 'ROLE_GERENTE_LOJA')) then\n    \n      RAISE_APPLICATION_ERROR(-20001\n                             ,'Favor assinalar a Identificação da Função !');\n    end if;\n  end if;\n  --\n/*  -- Se alteracao e foi alterado a role - desativa a role antiga\n  if UPDATING\n     and NVL(:OLD.AD_ROLE_ID, 0) > 0 then\n    update AD_USER_ROLES ROL\n       set ROL.ISACTIVE = 'N'\n     where ROL.AD_USER_ID = :NEW.AD_USER_ID\n       and ROL.AD_ROLE_ID = :OLD.AD_ROLE_ID;\n  end if;*/\n  -- Insere ou reativa a nova role\n  if NVL(:NEW.AD_ROLE_ID, 0) > 0 then\n    open CROLE(:NEW.AD_USER_ID, :NEW.AD_ROLE_ID);\n    fetch CROLE\n      into RROLE;\n    if CROLE%notfound then\n      insert into AD_USER_ROLES\n        (AD_USER_ID\n        ,AD_ROLE_ID\n        ,AD_CLIENT_ID\n        ,AD_ORG_ID\n        ,ISACTIVE\n        ,CREATED\n        ,CREATEDBY\n        ,UPDATED\n        ,UPDATEDBY)\n      values\n        (:NEW.AD_USER_ID\n        ,:NEW.AD_ROLE_ID\n        ,:NEW.AD_CLIENT_ID\n        ,0\n        , --:new.AD_ORG_ID,\n         'Y'\n        ,:NEW.CREATED\n        ,:NEW.CREATEDBY\n        ,:NEW.UPDATED\n        ,:NEW.UPDATEDBY);\n    end if;\n    if RROLE.ISACTIVE = 'N' then\n      update AD_USER_ROLES ROL\n         set ROL.ISACTIVE = 'Y'\n       where ROL.AD_USER_ID = :NEW.AD_USER_ID\n         and ROL.AD_ROLE_ID = :NEW.AD_ROLE_ID;\n    end if;\n    close CROLE;\n  end if;\n  --  end if;\n  /*  --Validando a representada - AOK - 22/10/2008 - Validado pelo cursor c_filial\n    if :new.CPFCNPJ_REPRESENTADA is not null then\n      open C_REPRESENTADA;\n      fetch C_REPRESENTADA\n        into V_BEG_REPRESENTADA_ID;\n    \n      if V_BEG_REPRESENTADA_ID is null then\n        close C_REPRESENTADA;\n        RAISE_APPLICATION_ERROR(-20001,\n                                'CNPJ representada não encontrado ! Representada deve ser cadastrada.');\n      end if;\n      close C_REPRESENTADA;\n    \n    end if;\n  */\n  /*  --Validando a representada (LOJA) - AOK - 22/10/2008 - Validado pelo cursor c_filial\n  if :new.CPFCNPJ_REPRESENTADA is null\n     and (:new.IND_VENDEDOR = 'Y' or :new.IND_GERENTE_VENDAS = 'Y') then\n    RAISE_APPLICATION_ERROR(-20001,\n                            'CNPJ representada (LOJA) deve ser informado para vendedores !');\n  end if;*/\n\n  --Criando o usuário no compiere\n  --V_AD_USER_ID := 1000084; --CBertoldo\n  -- AOK - 16/10/2008 - Verifica se usuario já não foi cadastrado no Compiere\n  if INSERTING then\n    open CUSER;\n    fetch CUSER\n      into RUSER;\n    if CUSER%notfound then\n      begin\n        V_AD_USER_ID := BEG_FNC_AD_SEQUENCE('AD_User');\n        :new.ad_user_id := V_AD_USER_ID;\n        insert into AD_USER\n          (AD_USER_ID\n          ,AD_CLIENT_ID\n          ,AD_ORG_ID\n          ,ISACTIVE\n          ,CREATED\n          ,CREATEDBY\n          ,UPDATED\n          ,UPDATEDBY\n          ,name\n          ,DESCRIPTION\n          ,PASSWORD\n          ,EMAIL\n          ,EMAILUSER)\n        values\n          (V_AD_USER_ID\n          ,:NEW.AD_CLIENT_ID\n          ,0\n          ,'Y'\n          ,:NEW.CREATED\n          ,100000\n          , --CREATEDBY,\n           :NEW.UPDATED\n          ,1000000\n          , --UPDATEDBY,\n           :NEW.USUARIO\n          ,RPESSOA.NOME\n          , --V_BEG_PESSOA_NOME,-- AOK - 21/10/2008\n           :NEW.SENHA\n          ,:NEW.EMAIL\n          ,:NEW.EMAIL);\n      \n        :NEW.AD_USER_ID := V_AD_USER_ID;\n      exception\n        when others then\n          null;\n      end;\n    else\n      :NEW.AD_USER_ID := RUSER.AD_USER_ID;\n      :NEW.SENHA      := RUSER.PASSWORD;\n      if RUSER.EMAILUSER is not null then\n        :NEW.EMAIL := RUSER.EMAILUSER;\n      elsif RUSER.EMAIL is not null then\n        :NEW.EMAIL := RUSER.EMAIL;\n      end if;\n      if :NEW.AD_ROLE_ID is null then\n        open CROLE(RUSER.AD_USER_ID);\n        fetch CROLE\n          into RROLE;\n        if CROLE%found then\n          :NEW.AD_ROLE_ID := RROLE.AD_ROLE_ID;\n        end if;\n        close CROLE;\n      end if;\n    \n    end if;\n    close CUSER;\n  end if;\n  --\n  --Inserindo acesso a Filial\n  -- AOK - 07/08/2008 - Inserido exeception devido a cad. feitos antes do apex\n  IF INSERTING THEN \n  begin\n    insert into AD_USER_ORGACCESS\n      (AD_USER_ID\n      ,AD_ORG_ID\n      ,AD_CLIENT_ID\n      ,ISACTIVE\n      ,CREATED\n      ,CREATEDBY\n      ,UPDATED\n      ,UPDATEDBY\n      ,ISREADONLY)\n    VALUES\n      (NVL(V_AD_USER_ID,:NEW.AD_USER_ID)\n      ,:NEW.AD_ORG_ID\n      ,:NEW.AD_CLIENT_ID\n      ,'Y'\n      ,:NEW.CREATED\n      ,:NEW.CREATEDBY\n      ,:NEW.UPDATED\n      ,:NEW.UPDATEDBY\n      ,'N');\n  exception\n    when DUP_VAL_ON_INDEX then\n      update AD_USER_ORGACCESS AUO\n         set AUO.ISACTIVE = 'Y'\n       where AUO.AD_USER_ID = :NEW.AD_USER_ID\n         and AUO.AD_ORG_ID = :NEW.AD_ORG_ID;\n  END;\n  END IF;\n  -- Consistencia para o uso de uma regra - role de acesso\n  if :NEW.IND_GERENTE_VENDAS = 'N'\n    -- and :new.IND_SUPERVISOR_TELEVENDAS = 'N'\n    -- and :new.IND_SUPERVISOR_VENDAS = 'N'\n    -- and :new.IND_TELE_VENDEDOR = 'N'\n    -- and :new.IND_SEPARADOR = 'N'\n     and :NEW.IND_VENDEDOR = 'N'\n     and :NEW.IND_COMPRADOR = 'N'\n     and :NEW.IND_CAIXA = 'N'\n     and :NEW.IND_CREDIARISTA = 'N'\n     and :NEW.IND_COBRADOR = 'N'\n     and NVL(:NEW.AD_ROLE_ID, 0) = 0\n     and :NEW.TIPO is null then\n    RAISE_APPLICATION_ERROR(-20001\n                           ,'Não foi identificado função ou faltou informar o perfil de acesso! ' ||\n                            :NEW.USUARIO);\n  end if;\n\nend BEG_TRG_BIU_APEX_USER;\n"}`;
    
        [NotMapped]
        public string Trigger_DIE_TRG_AU_APEX_USER { get; set; } = `{"triggering_event":"UPDATE","trigger_body":"declare\n  --\n  --VC_BEG_PESSOA_ID number(10) := 0;\n\n  VN_AD_ROLE_ID BEG_APEX_USER.AD_ROLE_ID%type;\n  --\n  cursor CROLE is\n    select *\n      from AD_USER_ROLES A\n     where A.AD_USER_ID = :new.AD_USER_ID\n       and A.AD_ROLE_ID = VN_AD_ROLE_ID\n       for update;\n  RROLE CROLE%rowtype;\n  --\n  cursor C_FILIAL(PAD_ORG_ID number) is\n    select PES.BEG_PESSOA_ID,\n           PES.CPFCNPJ,\n           DORG.BEG_PESSOA_ID FILIAL_ID\n      from AD_ORG          ORG,\n           BEG_DADO_FILIAL DORG,\n           BEG_PESSOA      PES\n     where ORG.AD_ORG_ID = PAD_ORG_ID --:new.AD_ORG_ID\n       and ORG.AD_ORG_ID = DORG.AD_ORG_ID\n       and DORG.BEG_PESSOA_ID = PES.BEG_PESSOA_ID;\n  R_FILIAL C_FILIAL%rowtype;\n  --\nbegin\n  --\n  if UPDATING('ISACTIVE') -- desabilitar no Ad_user\n   then\n    update AD_USER U\n       set U.ISACTIVE = :new.ISACTIVE\n     where U.AD_USER_ID = :new.AD_USER_ID;\n     if :NEW.ISACTIVE = 'N' AND :OLD.ISACTIVE = 'Y' THEN\n     \n     update AD_User_Roles U\n       set U.ISACTIVE = :new.ISACTIVE\n     where U.AD_USER_ID = :new.AD_USER_ID;\n     \n     END IF;\n     \n  elsif UPDATING('SENHA') ---- Alterar a senha na Ad_user\n   then\n    update AD_USER U\n       set U.PASSWORD = :new.SENHA\n     where U.AD_USER_ID = :new.AD_USER_ID;\n  end if;\n  --\n  if UPDATING('AD_ORG_ID') -- Alteracao da filial \n   then\n    open C_FILIAL(:old.AD_ORG_ID);\n    fetch C_FILIAL\n      into R_FILIAL;\n    close C_FILIAL;\n  \n    -- Tratamento da pessoa relacionada \n    update BEG_PESSOA_RELACIONADA PR\n       set PR.ISACTIVE = 'N'\n     where PR.AD_CLIENT_ID = :old.AD_CLIENT_ID\n       and PR.AD_ORG_ID = :old.AD_ORG_ID\n       and PR.BEG_PESSOA_ID = :old.BEG_PESSOA_ID\n       and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n    --       and PR.BEG_TP_PESSOA_RELACIONADA = 'CAI'\n    ;\n    -- Desabilita a filial anterior\n    update AD_USER_ORGACCESS AUO\n       set AUO.ISACTIVE = 'N'\n     where AUO.AD_USER_ID = :new.AD_USER_ID\n       and AUO.AD_ORG_ID = :old.AD_ORG_ID;\n  \n    -- Busca os dados da nova filial\n    open C_FILIAL(:new.AD_ORG_ID);\n    fetch C_FILIAL\n      into R_FILIAL;\n    close C_FILIAL;\n  \n    -- Caixa\n    if :new.IND_CAIXA = 'Y' then\n      VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                   SUBMODULO => null,\n                                                   PARAMETRO => 'ROLE_CAIXA_LOJA');\n      open CROLE;\n      fetch CROLE\n        into RROLE;\n      if CROLE%found then\n        update AD_USER_ROLES R\n           set R.ISACTIVE = case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end\n         where current of CROLE;\n      else\n        insert into AD_USER_ROLES\n          (AD_USER_ID,\n           AD_ROLE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY)\n        values\n          (:new.AD_USER_ID,\n           VN_AD_ROLE_ID,\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY);\n      end if;\n      close CROLE;\n      -- Tratamento da pessoa relacionada \n      update BEG_PESSOA_RELACIONADA PR\n         set PR.ISACTIVE = case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end\n       where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n         and PR.AD_ORG_ID = :new.AD_ORG_ID\n         and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n         and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n         and PR.BEG_TP_PESSOA_RELACIONADA = 'CAI';\n      if sql%rowcount = 0 then\n        insert into BEG_PESSOA_RELACIONADA\n          (BEG_PESSOA_RELACIONADA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           E_MAIL,\n           BEG_PESSOA_ID,\n           BEG_VW_PESSOA_RELACIONADA_ID,\n           BEG_TP_PESSOA_RELACIONADA,\n           COD_VENDA)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.EMAIL,\n           :new.BEG_PESSOA_ID,\n           R_FILIAL.FILIAL_ID,\n           'CAI',\n           :new.value);\n      end if;\n    end if;\n    -- Crediarista\n    if :new.IND_CREDIARISTA = 'Y' then\n      VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                   SUBMODULO => null,\n                                                   PARAMETRO => 'ROLE_CREDIARIO_LOJA');\n      open CROLE;\n      fetch CROLE\n        into RROLE;\n      if CROLE%found then\n        update AD_USER_ROLES R\n           set R.ISACTIVE = case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end\n         where current of CROLE;\n      else\n        insert into AD_USER_ROLES\n          (AD_USER_ID,\n           AD_ROLE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY)\n        values\n          (:new.AD_USER_ID,\n           VN_AD_ROLE_ID,\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY);\n      end if;\n      close CROLE;\n      -- Tratamento da pessoa relacionada \n      update BEG_PESSOA_RELACIONADA PR\n         set PR.ISACTIVE = case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end\n       where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n         and PR.AD_ORG_ID = :new.AD_ORG_ID\n         and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n         and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n         and PR.BEG_TP_PESSOA_RELACIONADA = 'CRE';\n      if sql%rowcount = 0 then\n        insert into BEG_PESSOA_RELACIONADA\n          (BEG_PESSOA_RELACIONADA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           E_MAIL,\n           BEG_PESSOA_ID,\n           BEG_VW_PESSOA_RELACIONADA_ID,\n           BEG_TP_PESSOA_RELACIONADA,\n           COD_VENDA)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.EMAIL,\n           :new.BEG_PESSOA_ID,\n           R_FILIAL.FILIAL_ID,\n           'CRE',\n           :new.value);\n      end if;\n    end if;\n    -- Vendedor\n    if :new.IND_VENDEDOR = 'Y' then\n      VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                   SUBMODULO => null,\n                                                   PARAMETRO => 'ROLE_VENDEDOR_LOJA');\n      open CROLE;\n      fetch CROLE\n        into RROLE;\n      if CROLE%found then\n        update AD_USER_ROLES R\n           set R.ISACTIVE = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end\n         where current of CROLE;\n      else\n        insert into AD_USER_ROLES\n          (AD_USER_ID,\n           AD_ROLE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY)\n        values\n          (:new.AD_USER_ID,\n           VN_AD_ROLE_ID,\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY);\n      end if;\n      close CROLE;\n      -- Atualiza a flag de vendedor no parceiro comercial\n      update BEG_PESSOA P\n         set P.VENDEDOR  = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end--,\n--             P.COD_VENDA = case when :new.IND_VENDEDOR = 'Y' then :new.value else P.COD_VENDA end\n       where P.BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n      -- Tratamento da pessoa relacionada \n      -- AOK - 12/01/2009 - AOK - Não ser atualizado como preposto - ver beg_ger_vendedor\n      /*      update BEG_PESSOA_RELACIONADA PR\n               set PR.ISACTIVE = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end\n             where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n               and PR.AD_ORG_ID = :new.AD_ORG_ID\n               and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n               and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n               and PR.BEG_TP_PESSOA_RELACIONADA = 'PPO';\n            if sql%rowcount = 0 then\n              insert into BEG_PESSOA_RELACIONADA\n                (BEG_PESSOA_RELACIONADA_ID,\n                 AD_CLIENT_ID,\n                 AD_ORG_ID,\n                 ISACTIVE,\n                 CREATED,\n                 CREATEDBY,\n                 UPDATED,\n                 UPDATEDBY,\n                 E_MAIL,\n                 BEG_PESSOA_ID,\n                 BEG_VW_PESSOA_RELACIONADA_ID,\n                 BEG_TP_PESSOA_RELACIONADA,\n                 COD_VENDA)\n              values\n                (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n                 :new.AD_CLIENT_ID,\n                 :new.AD_ORG_ID,\n                 case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n                 :new.CREATED,\n                 :new.CREATEDBY,\n                 :new.UPDATED,\n                 :new.UPDATEDBY,\n                 :new.EMAIL,\n                 :new.BEG_PESSOA_ID,\n                 R_FILIAL.FILIAL_ID,\n                 'PPO',\n                 :new.value);\n            end if;\n      */\n    end if;\n    -- GERENTE VENDAS\n    if :new.IND_GERENTE_VENDAS = 'Y' then\n      VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                   SUBMODULO => null,\n                                                   PARAMETRO => 'ROLE_GERENTE_LOJA');\n      open CROLE;\n      fetch CROLE\n        into RROLE;\n      if CROLE%found then\n        update AD_USER_ROLES R\n           set R.ISACTIVE = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n         where current of CROLE;\n      else\n        insert into AD_USER_ROLES\n          (AD_USER_ID,\n           AD_ROLE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY)\n        values\n          (:new.AD_USER_ID,\n           VN_AD_ROLE_ID,\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY);\n      end if;\n      close CROLE;\n      -- Atualiza a flag de Gerente de Vendas no Parceiro Comercial\n      update BEG_PESSOA\n         set GERENTE_VENDAS = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n       where BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n      -- Tratamento da pessoa relacionada \n      update BEG_PESSOA_RELACIONADA PR\n         set PR.ISACTIVE = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n       where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n         and PR.AD_ORG_ID = :new.AD_ORG_ID\n         and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n         and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n         and PR.BEG_TP_PESSOA_RELACIONADA = 'GER';\n      if sql%rowcount = 0 then\n        insert into BEG_PESSOA_RELACIONADA\n          (BEG_PESSOA_RELACIONADA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           E_MAIL,\n           BEG_PESSOA_ID,\n           BEG_VW_PESSOA_RELACIONADA_ID,\n           BEG_TP_PESSOA_RELACIONADA,\n           COD_VENDA)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.EMAIL,\n           :new.BEG_PESSOA_ID,\n           R_FILIAL.FILIAL_ID,\n           'GER',\n           :new.value);\n      end if;\n    end if;\n  end if;\n  --\n  if :new.CPFCNPJ_REPRESENTADA is not null then\n    open C_FILIAL(:new.AD_ORG_ID);\n    fetch C_FILIAL\n      into R_FILIAL;\n    close C_FILIAL;\n  end if;\n  --\n\n  -- Updating - Alterações - \n  -- Comprador\n  if UPDATING('ind_comprador') then\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_COMPRAS');\n    update BEG_PESSOA P\n       set P.COMPRADOR = case when :new.IND_COMPRADOR = 'Y' then 'Y' else 'N' end\n     where P.BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n  \n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case when :new.IND_COMPRADOR = 'Y' then 'Y' else 'N' end\n       where current of CROLE;\n    else\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         VN_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    end if;\n    close CROLE;\n  end if;\n  -- Caixa\n  if UPDATING('IND_CAIXA') then\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_CAIXA_LOJA');\n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end\n       where current of CROLE;\n    else\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         VN_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    end if;\n    close CROLE;\n    -- Tratamento da pessoa relacionada \n    update BEG_PESSOA_RELACIONADA PR\n       set PR.ISACTIVE = case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end\n     where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n       and PR.AD_ORG_ID = :new.AD_ORG_ID\n       and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n       and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n       and PR.BEG_TP_PESSOA_RELACIONADA = 'CAI';\n    if sql%rowcount = 0 then\n      insert into BEG_PESSOA_RELACIONADA\n        (BEG_PESSOA_RELACIONADA_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY,\n         E_MAIL,\n         BEG_PESSOA_ID,\n         BEG_VW_PESSOA_RELACIONADA_ID,\n         BEG_TP_PESSOA_RELACIONADA,\n         COD_VENDA)\n      values\n        (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n         :new.AD_CLIENT_ID,\n         :new.AD_ORG_ID,\n         case when :new.IND_CAIXA = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY,\n         :new.EMAIL,\n         :new.BEG_PESSOA_ID,\n         R_FILIAL.FILIAL_ID,\n         'CAI',\n         :new.value);\n    end if;\n  end if;\n  -- Crediarista\n  if UPDATING('IND_CREDIARISTA') then\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_CREDIARIO_LOJA');\n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end\n       where current of CROLE;\n    else\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         VN_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    end if;\n    close CROLE;\n    -- Tratamento da pessoa relacionada \n    update BEG_PESSOA_RELACIONADA PR\n       set PR.ISACTIVE = case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end\n     where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n       and PR.AD_ORG_ID = :new.AD_ORG_ID\n       and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n       and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n       and PR.BEG_TP_PESSOA_RELACIONADA = 'CRE';\n    if sql%rowcount = 0 then\n      insert into BEG_PESSOA_RELACIONADA\n        (BEG_PESSOA_RELACIONADA_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY,\n         E_MAIL,\n         BEG_PESSOA_ID,\n         BEG_VW_PESSOA_RELACIONADA_ID,\n         BEG_TP_PESSOA_RELACIONADA,\n         COD_VENDA)\n      values\n        (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n         :new.AD_CLIENT_ID,\n         :new.AD_ORG_ID,\n         case when :new.IND_CREDIARISTA = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY,\n         :new.EMAIL,\n         :new.BEG_PESSOA_ID,\n         R_FILIAL.FILIAL_ID,\n         'CRE',\n         :new.value);\n    end if;\n  end if;\n  -- Vendedor\n  if UPDATING('IND_VENDEDOR') then\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_VENDEDOR_LOJA');\n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end\n       where current of CROLE;\n    else\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         VN_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    end if;\n    close CROLE;\n    -- Atualiza a flag de vendedor no parceiro comercial\n    update BEG_PESSOA P\n       set P.VENDEDOR  = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end--,\n--           P.COD_VENDA = case when :new.IND_VENDEDOR = 'Y' then :new.value else P.COD_VENDA end\n     where P.BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n    -- Tratamento da pessoa relacionada \n    -- Não ser criado o preposto para vendedor - ver beg_ger_vendedor - AOK - 12/01/2009\n    /*    update BEG_PESSOA_RELACIONADA PR\n           set PR.ISACTIVE = case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end\n         where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n           and PR.AD_ORG_ID = :new.AD_ORG_ID\n           and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n           and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n           and PR.BEG_TP_PESSOA_RELACIONADA = 'PPO';\n        if sql%rowcount = 0 then\n          insert into BEG_PESSOA_RELACIONADA\n            (BEG_PESSOA_RELACIONADA_ID,\n             AD_CLIENT_ID,\n             AD_ORG_ID,\n             ISACTIVE,\n             CREATED,\n             CREATEDBY,\n             UPDATED,\n             UPDATEDBY,\n             E_MAIL,\n             BEG_PESSOA_ID,\n             BEG_VW_PESSOA_RELACIONADA_ID,\n             BEG_TP_PESSOA_RELACIONADA,\n             COD_VENDA)\n          values\n            (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n             :new.AD_CLIENT_ID,\n             :new.AD_ORG_ID,\n             case when :new.IND_VENDEDOR = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n             :new.CREATED,\n             :new.CREATEDBY,\n             :new.UPDATED,\n             :new.UPDATEDBY,\n             :new.EMAIL,\n             :new.BEG_PESSOA_ID,\n             R_FILIAL.FILIAL_ID,\n             'PPO',\n             :new.value);\n        end if;\n    */\n  end if;\n  -- GERENTE VENDAS\n  if UPDATING('IND_GERENTE_VENDAS') then\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_GERENTE_LOJA');\n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n       where current of CROLE;\n    else\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         VN_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    end if;\n    close CROLE;\n    -- Atualiza a flag de Gerente de Vendas no Parceiro Comercial\n    update BEG_PESSOA\n       set GERENTE_VENDAS = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n     where BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n    -- Tratamento da pessoa relacionada \n    update BEG_PESSOA_RELACIONADA PR\n       set PR.ISACTIVE = case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end\n     where PR.AD_CLIENT_ID = :new.AD_CLIENT_ID\n       and PR.AD_ORG_ID = :new.AD_ORG_ID\n       and PR.BEG_PESSOA_ID = :new.BEG_PESSOA_ID\n       and PR.BEG_VW_PESSOA_RELACIONADA_ID = R_FILIAL.FILIAL_ID\n       and PR.BEG_TP_PESSOA_RELACIONADA = 'GER';\n    if sql%rowcount = 0 then\n      --VC_BEG_PESSOA_ID := :new.BEG_PESSOA_ID;\n      begin\n        insert into BEG_PESSOA_RELACIONADA\n          (BEG_PESSOA_RELACIONADA_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           E_MAIL,\n           BEG_PESSOA_ID,\n           BEG_VW_PESSOA_RELACIONADA_ID,\n           BEG_TP_PESSOA_RELACIONADA,\n           COD_VENDA)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           case when :new.IND_GERENTE_VENDAS = 'Y' then 'Y' else 'N' end, --:new.ISACTIVE,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           :new.EMAIL,\n           :new.BEG_PESSOA_ID,\n           R_FILIAL.FILIAL_ID,\n           'GER',\n           :new.value);\n      exception\n        when DUP_VAL_ON_INDEX then\n          DBMS_OUTPUT.PUT_LINE('DUP : ' || :new.BEG_PESSOA_ID);\n        when others then\n          DBMS_OUTPUT.PUT_LINE(sqlerrm);\n      end;\n    end if;\n  end if; -- if UPDATING('ind_gerente_vendas ') then\nend DIE_TRG_AU_APEX_USER;\n"}`;
    
        [NotMapped]
        public string Trigger_DIE_TRG_BU_APEX_USER_COBR { get; set; } = `{"triggering_event":"UPDATE","trigger_body":"declare\n  VN_BEG_COBRADOR_ID BEG_COBRADOR.BEG_COBRADOR_ID%type;\n  VN_AD_ROLE_ID      BEG_APEX_USER.AD_ROLE_ID%type;\n  --\n  /*  cursor CCOBRADOR(PBEG_PESSOA_ID number, PBEG_FILIAL_ID number) is\n      select COB.BEG_COBRADOR_ID,\n             COBF.BEG_COBRADOR_FILIAL_ID,\n             COBF.BEG_FILIAL_ID,\n             COB.ISACTIVE COBR_ATIVO,\n             COBF.ISACTIVE COBRFIL_ATIVO\n        from BEG_COBRADOR        COB,\n             BEG_COBRADOR_FILIAL COBF\n       where COB.BEG_COBRADOR_ID = COBF.BEG_COBRADOR_ID\n         and COB.BEG_PESSOA_ID = PBEG_PESSOA_ID\n         and COBF.BEG_FILIAL_ID = PBEG_FILIAL_ID;\n    RCOBRADOR CCOBRADOR%rowtype;\n  */ --\n  cursor CCOBR(PBEG_PESSOA_ID number) is\n    select COB.*\n      from BEG_COBRADOR COB\n     where COB.BEG_PESSOA_ID = PBEG_PESSOA_ID;\n  RCOBR CCOBR%rowtype;\n  --\n  cursor CCOBR_FIL(PBEG_COBRADOR_ID number,\n                   PBEG_FILIAL_ID   number default 0) is\n    select COBF.*\n      from BEG_COBRADOR_FILIAL COBF\n     where COBF.BEG_COBRADOR_ID = PBEG_COBRADOR_ID\n       and (COBF.BEG_FILIAL_ID = PBEG_FILIAL_ID or PBEG_FILIAL_ID = 0);\n  RCOBR_FIL CCOBR_FIL%rowtype;\n  --\n  cursor CROLE is\n    select *\n      from AD_USER_ROLES A\n     where A.AD_USER_ID = :new.AD_USER_ID\n       and A.AD_ROLE_ID = VN_AD_ROLE_ID\n       for update;\n  RROLE CROLE%rowtype;\n  --\n  cursor C_FIL IS\n    SELECT AD.AD_ORG_ID, AD.NAME, AD.ENCERRAMENTO, AD.DT_ENCERRAMENTO\n      FROM AD_ORG AD\n     WHERE /*AD.ENCERRAMENTO = 'N'\n       AND*/ AD.AD_ORG_ID NOT IN (0,\n                                11,\n                                12,\n                                1000001,\n                                1000005,\n                                1000016,\n                                1000085,\n                                1000086,\n                                1000097,\n                                1000125)\n       AND NOT EXISTS (SELECT 1\n              FROM BEG_COBRADOR C, BEG_COBRADOR_FILIAL CF\n             WHERE C.BEG_COBRADOR_ID = CF.BEG_COBRADOR_ID\n               AND C.BEG_PESSOA_ID = :NEW.BEG_PESSOA_ID\n               AND CF.BEG_FILIAL_ID = AD.AD_ORG_ID);\n  --\nbegin\n  --\n  if UPDATING('AD_ORG_ID') -- Alteracao da filial \n     and :new.IND_COBRADOR = 'Y' -- Se cobrador\n   then\n    open CCOBR(:new.BEG_PESSOA_ID);\n    fetch CCOBR\n      into RCOBR;\n    if CCOBR%found then\n      update BEG_COBRADOR COB\n         set COB.AD_ORG_ID = :new.AD_ORG_ID, COB.ISACTIVE = 'Y'\n       where COB.BEG_COBRADOR_ID = RCOBR.BEG_COBRADOR_ID;\n      for RCOBR_FIL in CCOBR_FIL(RCOBR.BEG_COBRADOR_ID) loop\n        update BEG_COBRADOR_FILIAL COBF\n           set COBF.ISACTIVE = 'N'\n         where COBF.BEG_COBRADOR_FILIAL_ID =\n               RCOBR_FIL.BEG_COBRADOR_FILIAL_ID;\n      end loop;\n      open CCOBR_FIL(RCOBR.BEG_COBRADOR_ID, :new.AD_ORG_ID);\n      fetch CCOBR_FIL\n        into RCOBR_FIL;\n      if CCOBR_FIL%found then\n        update BEG_COBRADOR_FILIAL COBF\n           set COBF.AD_ORG_ID = 0, COBF.ISACTIVE = 'Y'\n         where COBF.BEG_COBRADOR_FILIAL_ID =\n               RCOBR_FIL.BEG_COBRADOR_FILIAL_ID;\n      else\n      \n        IF :NEW.AD_ORG_ID <> 1000016 THEN\n        \n          insert into BEG_COBRADOR_FILIAL\n            (BEG_COBRADOR_FILIAL_ID,\n             AD_CLIENT_ID,\n             AD_ORG_ID,\n             ISACTIVE,\n             CREATED,\n             CREATEDBY,\n             UPDATED,\n             UPDATEDBY,\n             BEG_COBRADOR_ID,\n             BEG_FILIAL_ID,\n             CODFIL,\n             APP_USER,\n             NRO_DIAS_MIN,\n             NRO_DIAS_MAX)\n          values\n            (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n             :new.AD_CLIENT_ID,\n             0, --:new.AD_ORG_ID,\n             :new.ISACTIVE,\n             :new.CREATED,\n             :new.CREATEDBY,\n             :new.UPDATED,\n             :new.UPDATEDBY,\n             RCOBR.BEG_COBRADOR_ID,\n             :new.AD_ORG_ID, --BEG_FILIAL_ID,\n             0, --CODFIL,\n             null, --APP_USER,\n             0, --NRO_DIAS_MIN,\n             0); --NRO_DIAS_MAX);\n        ELSE\n        \n          FOR X IN C_FIL LOOP\n            insert into BEG_COBRADOR_FILIAL\n              (BEG_COBRADOR_FILIAL_ID,\n               AD_CLIENT_ID,\n               AD_ORG_ID,\n               ISACTIVE,\n               CREATED,\n               CREATEDBY,\n               UPDATED,\n               UPDATEDBY,\n               BEG_COBRADOR_ID,\n               BEG_FILIAL_ID,\n               CODFIL,\n               APP_USER,\n               NRO_DIAS_MIN,\n               NRO_DIAS_MAX)\n            values\n              (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n               :new.AD_CLIENT_ID,\n               0, --:new.AD_ORG_ID,\n               :new.ISACTIVE,\n               :new.CREATED,\n               :new.CREATEDBY,\n               :new.UPDATED,\n               :new.UPDATEDBY,\n               RCOBR.BEG_COBRADOR_ID,\n               X.AD_ORG_ID, --BEG_FILIAL_ID,\n               0, --CODFIL,\n               null, --APP_USER,\n               0, --NRO_DIAS_MIN,\n               0); --NRO_DIAS_MAX);\n          \n          END LOOP;\n        \n        END IF;\n      \n      end if;\n    end if;\n    close CCOBR;\n  end if;\n\n  -- Alteracao do indicativo de cobrador\n  if UPDATING('IND_COBRADOR') -- \n   then\n    if :new.IND_COBRADOR = 'N' then\n      open CCOBR(:new.BEG_PESSOA_ID);\n      fetch CCOBR\n        into RCOBR;\n      if CCOBR%found then\n        for RCOBR_FIL in CCOBR_FIL(RCOBR.BEG_COBRADOR_ID) loop\n          update BEG_COBRADOR_FILIAL COBF\n             set COBF.ISACTIVE = 'N'\n           where COBF.BEG_COBRADOR_FILIAL_ID =\n                 RCOBR_FIL.BEG_COBRADOR_FILIAL_ID;\n        end loop;\n        update BEG_COBRADOR COB\n           set COB.ISACTIVE = 'N'\n         where COB.BEG_COBRADOR_ID = RCOBR.BEG_COBRADOR_ID;\n      end if;\n      close CCOBR;\n    else\n      -- Foi assinalado como cobrador\n      open CCOBR(:new.BEG_PESSOA_ID);\n      fetch CCOBR\n        into RCOBR;\n      if CCOBR%found then\n        --\n        update BEG_COBRADOR COB\n           set COB.ISACTIVE = 'Y', COB.AD_ORG_ID = :new.AD_ORG_ID\n         where COB.BEG_COBRADOR_ID = RCOBR.BEG_COBRADOR_ID;\n        --\n        open CCOBR_FIL(RCOBR.BEG_COBRADOR_ID, :new.AD_ORG_ID);\n        fetch CCOBR_FIL\n          into RCOBR_FIL;\n        if CCOBR_FIL%found then\n          update BEG_COBRADOR_FILIAL COBF\n             set COBF.ISACTIVE = 'Y'\n           where COBF.BEG_COBRADOR_FILIAL_ID =\n                 RCOBR_FIL.BEG_COBRADOR_FILIAL_ID;\n          IF :NEW.AD_ORG_ID = 1000016 THEN\n            FOR X IN C_FIL LOOP\n              insert into BEG_COBRADOR_FILIAL\n                (BEG_COBRADOR_FILIAL_ID,\n                 AD_CLIENT_ID,\n                 AD_ORG_ID,\n                 ISACTIVE,\n                 CREATED,\n                 CREATEDBY,\n                 UPDATED,\n                 UPDATEDBY,\n                 BEG_COBRADOR_ID,\n                 BEG_FILIAL_ID,\n                 CODFIL,\n                 APP_USER,\n                 NRO_DIAS_MIN,\n                 NRO_DIAS_MAX)\n              values\n                (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n                 :new.AD_CLIENT_ID,\n                 0, --:new.AD_ORG_ID,\n                 :new.ISACTIVE,\n                 :new.CREATED,\n                 :new.CREATEDBY,\n                 :new.UPDATED,\n                 :new.UPDATEDBY,\n                 RCOBR.BEG_COBRADOR_ID,\n                 X.AD_ORG_ID, --BEG_FILIAL_ID,\n                 0, --CODFIL,\n                 null, --APP_USER,\n                 0, --NRO_DIAS_MIN,\n                 0); --NRO_DIAS_MAX);\n            \n            END LOOP;\n          \n          END IF;\n        \n        else\n        \n          IF :NEW.AD_ORG_ID = 1000016 THEN\n            insert into BEG_COBRADOR_FILIAL\n              (BEG_COBRADOR_FILIAL_ID,\n               AD_CLIENT_ID,\n               AD_ORG_ID,\n               ISACTIVE,\n               CREATED,\n               CREATEDBY,\n               UPDATED,\n               UPDATEDBY,\n               BEG_COBRADOR_ID,\n               BEG_FILIAL_ID,\n               CODFIL,\n               APP_USER,\n               NRO_DIAS_MIN,\n               NRO_DIAS_MAX)\n            values\n              (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n               :new.AD_CLIENT_ID,\n               0, --:new.AD_ORG_ID,\n               :new.ISACTIVE,\n               :new.CREATED,\n               :new.CREATEDBY,\n               :new.UPDATED,\n               :new.UPDATEDBY,\n               rcobr.beg_cobrador_id,\n               :new.AD_ORG_ID, --BEG_FILIAL_ID,\n               0, --CODFIL,\n               null, --APP_USER,\n               0, --NRO_DIAS_MIN,\n               0); --NRO_DIAS_MAX);\n          ELSE\n            FOR X IN C_FIL LOOP\n              insert into BEG_COBRADOR_FILIAL\n                (BEG_COBRADOR_FILIAL_ID,\n                 AD_CLIENT_ID,\n                 AD_ORG_ID,\n                 ISACTIVE,\n                 CREATED,\n                 CREATEDBY,\n                 UPDATED,\n                 UPDATEDBY,\n                 BEG_COBRADOR_ID,\n                 BEG_FILIAL_ID,\n                 CODFIL,\n                 APP_USER,\n                 NRO_DIAS_MIN,\n                 NRO_DIAS_MAX)\n              values\n                (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n                 :new.AD_CLIENT_ID,\n                 0, --:new.AD_ORG_ID,\n                 :new.ISACTIVE,\n                 :new.CREATED,\n                 :new.CREATEDBY,\n                 :new.UPDATED,\n                 :new.UPDATEDBY,\n                 RCOBR.BEG_COBRADOR_ID,\n                 X.AD_ORG_ID, --BEG_FILIAL_ID,\n                 0, --CODFIL,\n                 null, --APP_USER,\n                 0, --NRO_DIAS_MIN,\n                 0); --NRO_DIAS_MAX);\n            \n            END LOOP;\n          \n          END IF;\n        \n        end if;\n        close CCOBR_FIL;\n      else\n        VN_BEG_COBRADOR_ID := BEG_FNC_AD_SEQUENCE('BEG_COBRADOR');\n        insert into BEG_COBRADOR\n          (BEG_COBRADOR_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           value,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           PERC_COMISSAO,\n           BEG_PESSOA_ID,\n           NRO_DIAS_MIN,\n           NRO_DIAS_MAX,\n           IND_ATUACAO,\n           DT_ULT_RETORNO,\n           IND_ARQUIVO)\n        values\n          (VN_BEG_COBRADOR_ID,\n           :new.AD_CLIENT_ID,\n           :new.AD_ORG_ID,\n           :new.ISACTIVE,\n           VN_BEG_COBRADOR_ID,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           0, -- PERC_COMISSAO,\n           :new.BEG_PESSOA_ID,\n           9, -- NRO_DIAS_MIN,\n           61, -- NRO_DIAS_MAX,\n           'I', -- IND_ATUACAO,\n           null, -- DT_ULT_RETORNO,\n           'N'); -- IND_ARQUIVO);\n      \n        IF :NEW.AD_ORG_ID <> 1000016 THEN\n        \n          insert into BEG_COBRADOR_FILIAL\n            (BEG_COBRADOR_FILIAL_ID,\n             AD_CLIENT_ID,\n             AD_ORG_ID,\n             ISACTIVE,\n             CREATED,\n             CREATEDBY,\n             UPDATED,\n             UPDATEDBY,\n             BEG_COBRADOR_ID,\n             BEG_FILIAL_ID,\n             CODFIL,\n             APP_USER,\n             NRO_DIAS_MIN,\n             NRO_DIAS_MAX)\n          values\n            (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n             :new.AD_CLIENT_ID,\n             0, --:new.AD_ORG_ID,\n             :new.ISACTIVE,\n             :new.CREATED,\n             :new.CREATEDBY,\n             :new.UPDATED,\n             :new.UPDATEDBY,\n             VN_BEG_COBRADOR_ID,\n             :new.AD_ORG_ID, --BEG_FILIAL_ID,\n             0, --CODFIL,\n             null, --APP_USER,\n             0, --NRO_DIAS_MIN,\n             0); --NRO_DIAS_MAX);\n        ELSE\n          FOR X IN C_FIL LOOP\n            insert into BEG_COBRADOR_FILIAL\n              (BEG_COBRADOR_FILIAL_ID,\n               AD_CLIENT_ID,\n               AD_ORG_ID,\n               ISACTIVE,\n               CREATED,\n               CREATEDBY,\n               UPDATED,\n               UPDATEDBY,\n               BEG_COBRADOR_ID,\n               BEG_FILIAL_ID,\n               CODFIL,\n               APP_USER,\n               NRO_DIAS_MIN,\n               NRO_DIAS_MAX)\n            values\n              (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n               :new.AD_CLIENT_ID,\n               0, --:new.AD_ORG_ID,\n               :new.ISACTIVE,\n               :new.CREATED,\n               :new.CREATEDBY,\n               :new.UPDATED,\n               :new.UPDATEDBY,\n               VN_BEG_COBRADOR_ID,\n               X.AD_ORG_ID, --BEG_FILIAL_ID,\n               0, --CODFIL,\n               null, --APP_USER,\n               0, --NRO_DIAS_MIN,\n               0); --NRO_DIAS_MAX);\n          \n          END LOOP;\n        \n        END IF;\n      \n      end if;\n      close ccobr;\n    end if; --if :new.IND_COBRADOR = 'Y' then\n  end if;\n\n  if UPDATING('ind_cobrador') then\n    -- Verifica se ja possui a role da cobranca\n    VN_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                 SUBMODULO => null,\n                                                 PARAMETRO => 'ROLE_COBRANCA');\n    open CROLE;\n    fetch CROLE\n      into RROLE;\n    if CROLE%found then\n      update AD_USER_ROLES R\n         set R.ISACTIVE = case\n                            when :new.IND_COBRADOR = 'Y' then\n                             'Y'\n                            else\n                             'N'\n                          end\n       where current of CROLE;\n    else\n      if :new.IND_COBRADOR = 'Y' then\n        insert into AD_USER_ROLES\n          (AD_USER_ID,\n           AD_ROLE_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY)\n        values\n          (:new.AD_USER_ID,\n           VN_AD_ROLE_ID,\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           'Y',\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY);\n      end if;\n    end if;\n    close CROLE;\n  end if;\n\nend DIE_TRG_BU_APEX_USER_COBR;\n"}`;
    
        [NotMapped]
        public string Trigger_BEG_TRG_AI_APEX_USER { get; set; } = `{"triggering_event":"INSERT","trigger_body":"declare\n  --\n  cursor C_PESSOA is\n    select * from BEG_PESSOA PES where PES.CPFCNPJ = :new.CPFCNPJ;\n  R_PESSOA C_PESSOA%rowtype;\n  --\n  cursor C_FILIAL is\n    select P.BEG_PESSOA_ID, P.CPFCNPJ, DF.BEG_PESSOA_ID FILIAL_ID\n      from AD_ORG O, BEG_DADO_FILIAL DF, BEG_PESSOA P\n     where O.AD_ORG_ID = :new.AD_ORG_ID\n       and O.AD_ORG_ID = DF.AD_ORG_ID\n       and DF.BEG_PESSOA_ID = P.BEG_PESSOA_ID;\n  R_FILIAL C_FILIAL%rowtype;\n  --\n  V_AD_ROLE_ID       number(10);\n  VN_BEG_COBRADOR_ID BEG_COBRADOR.BEG_COBRADOR_ID%type; -- AOK - 13/06/2008\n  --\n  cursor C_FIL IS\n    SELECT AD.AD_ORG_ID, AD.NAME, AD.ENCERRAMENTO, AD.DT_ENCERRAMENTO\n      FROM AD_ORG AD\n     WHERE AD.ENCERRAMENTO = 'N'\n       AND AD.AD_ORG_ID NOT IN (0,\n                                11,\n                                12,\n                                1000001,\n                                1000005,\n                                1000016,\n                                1000085,\n                                1000086,\n                                1000097,\n                                1000125)\n       AND NOT EXISTS (SELECT 1\n              FROM BEG_COBRADOR C, BEG_COBRADOR_FILIAL CF\n             WHERE C.BEG_COBRADOR_ID = CF.BEG_COBRADOR_ID\n               AND C.BEG_PESSOA_ID = :NEW.BEG_PESSOA_ID\n               AND CF.BEG_FILIAL_ID = AD.AD_ORG_ID);\n\nbegin\n\n  open C_PESSOA;\n  fetch C_PESSOA\n    into R_PESSOA;\n  close C_PESSOA;\n\n  if :new.CPFCNPJ_REPRESENTADA is not null then\n    open C_FILIAL;\n    fetch C_FILIAL\n      into R_FILIAL;\n    close C_FILIAL;\n  end if;\n  -- AOK -- 07/04/2008 -- Inserindo o Cobrador\n  if :new.IND_COBRADOR = 'Y' then\n    --Buscando role do Cobranca\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_COBRANCA');\n    begin\n      insert into AD_USER_ROLES\n        (AD_USER_ID,\n         AD_ROLE_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY)\n      values\n        (:new.AD_USER_ID,\n         V_AD_ROLE_ID,\n         :new.AD_CLIENT_ID,\n         0, --:new.AD_ORG_ID,\n         'Y',\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY);\n    exception\n      when DUP_VAL_ON_INDEX then\n        null;\n        --        RAISE_APPLICATION_ERROR(-20003, sqlerrm);\n      when others then\n        RAISE_APPLICATION_ERROR(-20004, sqlerrm);\n    end;\n    begin\n      VN_BEG_COBRADOR_ID := BEG_FNC_AD_SEQUENCE('BEG_COBRADOR');\n      insert into BEG_COBRADOR\n        (BEG_COBRADOR_ID,\n         AD_CLIENT_ID,\n         AD_ORG_ID,\n         ISACTIVE,\n         value,\n         CREATED,\n         CREATEDBY,\n         UPDATED,\n         UPDATEDBY,\n         PERC_COMISSAO,\n         BEG_PESSOA_ID,\n         NRO_DIAS_MIN,\n         NRO_DIAS_MAX,\n         IND_ATUACAO,\n         DT_ULT_RETORNO,\n         IND_ARQUIVO)\n      values\n        ( --BEG_FNC_AD_SEQUENCE('BEG_COBRADOR'), -- AOK - 13/06/2008\n         VN_BEG_COBRADOR_ID,\n         :new.AD_CLIENT_ID,\n         :new.AD_ORG_ID,\n         :new.ISACTIVE,\n         VN_BEG_COBRADOR_ID,\n         --BEG_FNC_AD_SEQUENCE_VALUE('BEG_COBRADOR'), -- Value -- AOK - 13/06/2008\n         :new.CREATED,\n         :new.CREATEDBY,\n         :new.UPDATED,\n         :new.UPDATEDBY,\n         0, -- PERC_COMISSAO,\n         :new.BEG_PESSOA_ID,\n         9, -- NRO_DIAS_MIN,\n         61, -- NRO_DIAS_MAX,\n         'I', -- IND_ATUACAO,\n         null, -- DT_ULT_RETORNO,\n         'N'); -- IND_ARQUIVO);\n      -- AOK -- 16/10/2008 - \n    \n      IF :NEW.AD_ORG_ID <> 1000016 THEN\n      \n        insert into BEG_COBRADOR_FILIAL\n          (BEG_COBRADOR_FILIAL_ID,\n           AD_CLIENT_ID,\n           AD_ORG_ID,\n           ISACTIVE,\n           CREATED,\n           CREATEDBY,\n           UPDATED,\n           UPDATEDBY,\n           BEG_COBRADOR_ID,\n           BEG_FILIAL_ID,\n           CODFIL,\n           APP_USER,\n           NRO_DIAS_MIN,\n           NRO_DIAS_MAX)\n        values\n          (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n           :new.AD_CLIENT_ID,\n           0, --:new.AD_ORG_ID,\n           :new.ISACTIVE,\n           :new.CREATED,\n           :new.CREATEDBY,\n           :new.UPDATED,\n           :new.UPDATEDBY,\n           VN_BEG_COBRADOR_ID,\n           :new.AD_ORG_ID, --BEG_FILIAL_ID,\n           0, --CODFIL,\n           null, --APP_USER,\n           0, --NRO_DIAS_MIN,\n           0); --NRO_DIAS_MAX);\n      \n      ELSE\n        FOR X IN C_FIL LOOP\n          insert into BEG_COBRADOR_FILIAL\n            (BEG_COBRADOR_FILIAL_ID,\n             AD_CLIENT_ID,\n             AD_ORG_ID,\n             ISACTIVE,\n             CREATED,\n             CREATEDBY,\n             UPDATED,\n             UPDATEDBY,\n             BEG_COBRADOR_ID,\n             BEG_FILIAL_ID,\n             CODFIL,\n             APP_USER,\n             NRO_DIAS_MIN,\n             NRO_DIAS_MAX)\n          values\n            (BEG_FNC_AD_SEQUENCE('BEG_COBRADOR_FILIAL'),\n             :new.AD_CLIENT_ID,\n             0, --:new.AD_ORG_ID,\n             :new.ISACTIVE,\n             :new.CREATED,\n             :new.CREATEDBY,\n             :new.UPDATED,\n             :new.UPDATEDBY,\n             VN_BEG_COBRADOR_ID,\n             X.AD_ORG_ID, --BEG_FILIAL_ID,\n             0, --CODFIL,\n             null, --APP_USER,\n             0, --NRO_DIAS_MIN,\n             0); --NRO_DIAS_MAX);\n        \n        END LOOP;\n      \n      END IF;\n    \n    exception\n      when DUP_VAL_ON_INDEX then\n        RAISE_APPLICATION_ERROR(-20001, sqlerrm);\n      when others then\n        RAISE_APPLICATION_ERROR(-20002, sqlerrm);\n    end;\n  \n  end if;\n\n  --Inserindo o preposto na filial\n  if :new.IND_VENDEDOR = 'Y' then\n    BEG_PCK_APEX.V_APEX_VENDEDOR := 'Y';\n    /*update BEG_PESSOA\n      set VENDEDOR  = 'Y',\n          COD_VENDA = :new.value\n    where BEG_PESSOA_ID = :new.BEG_PESSOA_ID;*/\n    -- AOK - 12/01/2009 - Não sera usada - ver beg_ger_vendedor\n    /*    insert into BEG_PESSOA_RELACIONADA\n      (BEG_PESSOA_RELACIONADA_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY,\n       E_MAIL,\n       BEG_PESSOA_ID,\n       BEG_VW_PESSOA_RELACIONADA_ID,\n       BEG_TP_PESSOA_RELACIONADA,\n       COD_VENDA)\n    values\n      (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n       :new.AD_CLIENT_ID,\n       :new.AD_ORG_ID,\n       :new.ISACTIVE,\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY,\n       :new.EMAIL,\n       R_FILIAL.FILIAL_ID,\n       :new.BEG_PESSOA_ID,\n       'PPO',\n       :new.value);*/\n  \n    --Buscando role do vendedor\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_VENDEDOR_LOJA');\n  \n    insert into AD_USER_ROLES\n      (AD_USER_ID,\n       AD_ROLE_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY)\n    values\n      (:new.AD_USER_ID,\n       V_AD_ROLE_ID,\n       :new.AD_CLIENT_ID,\n       0, --:new.AD_ORG_ID,\n       'Y',\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY);\n  \n  end if;\n\n  --Inserindo o gerente na filial\n  if :new.IND_GERENTE_VENDAS = 'Y' then\n    update BEG_PESSOA\n       set GERENTE_VENDAS = 'Y'\n     where BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n  \n    insert into BEG_PESSOA_RELACIONADA\n      (BEG_PESSOA_RELACIONADA_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY,\n       E_MAIL,\n       BEG_PESSOA_ID,\n       BEG_VW_PESSOA_RELACIONADA_ID,\n       BEG_TP_PESSOA_RELACIONADA,\n       COD_VENDA)\n    values\n      (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n       :new.AD_CLIENT_ID,\n       :new.AD_ORG_ID,\n       :new.ISACTIVE,\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY,\n       :new.EMAIL,\n       R_FILIAL.FILIAL_ID,\n       :new.BEG_PESSOA_ID,\n       'GER',\n       :new.value);\n  \n    --Buscando role do Gerente\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_GERENTE_LOJA');\n  \n    insert into AD_USER_ROLES\n      (AD_USER_ID,\n       AD_ROLE_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY)\n    values\n      (:new.AD_USER_ID,\n       V_AD_ROLE_ID,\n       :new.AD_CLIENT_ID,\n       0, --:new.AD_ORG_ID,\n       'Y',\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY);\n  \n  end if;\n\n  --Inserindo acesso de comprador\n  if :new.IND_COMPRADOR = 'Y' then\n    update BEG_PESSOA P\n       set P.COMPRADOR = 'Y'\n     where P.BEG_PESSOA_ID = :new.BEG_PESSOA_ID;\n  \n    --Buscando role do vendedor\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_COMPRAS');\n  \n    insert into AD_USER_ROLES\n      (AD_USER_ID,\n       AD_ROLE_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY)\n    values\n      (:new.AD_USER_ID,\n       V_AD_ROLE_ID,\n       :new.AD_CLIENT_ID,\n       0, --:new.AD_ORG_ID,\n       'Y',\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY);\n  \n  end if;\n\n  --Inserindo acesso de caixa\n  if :new.IND_CAIXA = 'Y' then\n  \n    --Buscando role do vendedor\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_CAIXA_LOJA');\n  \n    insert into AD_USER_ROLES\n      (AD_USER_ID,\n       AD_ROLE_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY)\n    values\n      (:new.AD_USER_ID,\n       V_AD_ROLE_ID,\n       :new.AD_CLIENT_ID,\n       0, --:new.AD_ORG_ID,\n       'Y',\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY);\n  \n    insert into BEG_PESSOA_RELACIONADA\n      (BEG_PESSOA_RELACIONADA_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY,\n       E_MAIL,\n       BEG_PESSOA_ID,\n       BEG_VW_PESSOA_RELACIONADA_ID,\n       BEG_TP_PESSOA_RELACIONADA,\n       COD_VENDA)\n    values\n      (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n       :new.AD_CLIENT_ID,\n       :new.AD_ORG_ID,\n       :new.ISACTIVE,\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY,\n       :new.EMAIL,\n       R_FILIAL.FILIAL_ID,\n       :new.BEG_PESSOA_ID,\n       'CAI',\n       :new.value);\n  \n  end if;\n\n  --Inserindo acesso de crediarista\n  if :new.IND_CREDIARISTA = 'Y' then\n  \n    --Buscando role do Crediarista\n    V_AD_ROLE_ID := BEG_FNC_RETORNA_PARAM_GERAL(MODULO    => 'Geral',\n                                                SUBMODULO => null,\n                                                PARAMETRO => 'ROLE_CREDIARIO_LOJA');\n  \n    insert into AD_USER_ROLES\n      (AD_USER_ID,\n       AD_ROLE_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY)\n    values\n      (:new.AD_USER_ID,\n       V_AD_ROLE_ID,\n       :new.AD_CLIENT_ID,\n       0, --:new.AD_ORG_ID,\n       'Y',\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY);\n  \n    insert into BEG_PESSOA_RELACIONADA\n      (BEG_PESSOA_RELACIONADA_ID,\n       AD_CLIENT_ID,\n       AD_ORG_ID,\n       ISACTIVE,\n       CREATED,\n       CREATEDBY,\n       UPDATED,\n       UPDATEDBY,\n       E_MAIL,\n       BEG_PESSOA_ID,\n       BEG_VW_PESSOA_RELACIONADA_ID,\n       BEG_TP_PESSOA_RELACIONADA,\n       COD_VENDA)\n    values\n      (BEG_FNC_AD_SEQUENCE('BEG_PESSOA_RELACIONADA'),\n       :new.AD_CLIENT_ID,\n       :new.AD_ORG_ID,\n       :new.ISACTIVE,\n       :new.CREATED,\n       :new.CREATEDBY,\n       :new.UPDATED,\n       :new.UPDATEDBY,\n       :new.EMAIL,\n       R_FILIAL.FILIAL_ID,\n       :new.BEG_PESSOA_ID,\n       'CRE',\n       :new.value);\n  \n  end if;\n\nend BEG_TRG_AI_APEX_USER;\n"}`;
    
    }
}
